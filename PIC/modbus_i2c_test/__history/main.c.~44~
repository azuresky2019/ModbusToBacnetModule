#include <main.h>


#define MODBUS_BUS SERIAL
#define MODBUS_TYPE MODBUS_TYPE_MASTER
#define MODBUS_SERIAL_TYPE MODBUS_RTU
#define MODBUS_SERIAL_INT_SOURCE MODBUS_INT_RDA
//#define MODBUS_SERIAL_RX_ENABLE PIN_C1
#define MODBUS_SERIAL_ENABLE_PIN PIN_C3 
#define MODBUS_SERIAL_BAUD 19200
#define MODBUS_REMOTE_ADDRESS 247
#include "modbus.c"


#define  LENGTH    256

unsigned int8 address, buffer[LENGTH];

#INT_SSP
void ssp_interrupt ()
{
   unsigned int8 incoming, state;

   state = i2c_isr_state();

   if(state <= 0x80)                      //Master is sending data
   {
      if(state == 0x80)
         incoming = i2c_read(2);          //Passing 2 as parameter, causes the function to read the SSPBUF without releasing the clock
      else
         incoming = i2c_read();

      if(state == 1)                      //First received byte is address
         address = incoming;
      else if(state >= 2 && state != 0x80)   //Received byte is data
         buffer[address++] = incoming;
   }

   if(state >= 0x80)                      //Master is requesting data
   {
      i2c_write(buffer[address++]);
   }
}


void main()
{
       
   enable_interrupts(GLOBAL);
   enable_interrupts(INT_SSP);
   
   modbus_init();  
   
   while(TRUE)
   {
  
      modbus_read_holding_registers(0xff,0x00,0x06);     
      //Example blinking LED program
 //     output_low(LED);
 //     delay_ms(DELAY);
 //     output_high(LED);
 //     delay_ms(DELAY);

      //TODO: User Code           
      memcpy(buffer,modbus_rx.data,modbus_rx.len);
   }
}











