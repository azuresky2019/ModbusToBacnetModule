#include <main.h>
#include "pic.h"

#define MODBUS_BUS SERIAL
#define MODBUS_TYPE MODBUS_TYPE_MASTER
#define MODBUS_SERIAL_TYPE MODBUS_RTU
#define MODBUS_SERIAL_INT_SOURCE MODBUS_INT_RDA
//#define MODBUS_SERIAL_RX_ENABLE PIN_C1
#define MODBUS_SERIAL_ENABLE_PIN PIN_C3 
#define MODBUS_SERIAL_BAUD 19200
#define MODBUS_REMOTE_ADDRESS 247
#include "modbus.c"

///////////////////////////////////////////////////////////////////
char waitCL(char state, unsigned int maxcount, char DAstate);
char waitDA(char state, unsigned int maxcount, char CLstate);
unsigned char soft_i2c_read(void)   ;
void soft_i2c_write(unsigned int16 ch);
void i2c_write_para(int16 buf);
void ext_int_inital(void);
///////////////////--------I2C ROUTINES---------///////////////////
///////////////////////////////////////////////////////////////////
void poll_i2c_bus()
{
    int16 cap_buffer = 0; 
    int8  i2c_buf,i2c_cmd;
    if(!DA_AS_EXPECTED(LO))                
        return;         

    if(!CL_AS_EXPECTED(HI))
        return;

    if(!waitCL (LO, 200, LO))
        return;
    //analog_input_data[1] = waitCLcount; // Debug, To measure I2C iterations
    if(!waitCL (HI, 200, XX))
        return;
    //analog_input_data[2] = waitCLcount; // Debug, To measure I2C iterations
    if(!DA_AS_EXPECTED (HI))
        return;

    // watch for 2nd start condition
    if(!waitDA(LO, 200, HI))                   
        return;
    //analog_input_data[3] = waitDAcount; // Debug, To measure I2C iterations
    if(!waitCL(LO, 200, XX))
        return;
    //analog_input_data[4] = waitCLcount; // Debug, To measure I2C iterations
    // Read the address being broadcast
    i2c_buf = soft_i2c_read();    
    if(i2c_buf == IIC_ADDR)
    { 
          
         i2c_give_ack();
         i2c_cmd = soft_i2c_read(); 
         // if address matches, send ACK and write data
         if(i2c_cmd == CMD_READ_PARAMS)                // read parameters such as humidity, temperature...
         {
            serial_receive_watchdog = 1;
            i2c_write_data();
//            serial_receive_timeout = SERIAL_TIMEOUT_SECONDS;
         }
         else if(i2c_cmd == CMD_READ_VERSION)          // read version
         {
           serial_receive_watchdog = 1;
           i2c_write_version();
         } 
         else if(i2c_cmd == CMD_SN_READ)               // read serial number
         {
           serial_receive_watchdog = 1;
           i2c_write_para(serialnumber); 
         }
         else if(i2c_cmd == CMD_CONFIG_READ)
         {   
              serial_receive_watchdog = 1; 
              cap_buffer = ((int16)cal_table_sel<<8) + heating_flag; 
              i2c_write_para(cap_buffer);
              
         } 
         else if(i2c_cmd == CMD_READ_CAL_PT)           // read calibration table point
         {                               
           serial_receive_watchdog = 1;
           i2c_give_ack();
         
           i2c_buf = soft_i2c_read();
           i2c_give_ack();
         
           cap_buffer = 0;
           if(i2c_buf < humidity_table_counter[cal_table_sel])
           {
               soft_i2c_write(hum_table[cal_table_sel][i2c_buf].hum);
               if(!i2c_get_ack())
                   return;
               cap_buffer += hum_table[cal_table_sel][i2c_buf].hum; 
         
               soft_i2c_write(hum_table[cal_table_sel][i2c_buf].freq);
               if(!i2c_get_ack())
                   return;
               cap_buffer += hum_table[cal_table_sel][i2c_buf].freq;    
           }
           else
           {
               soft_i2c_write(0);
               if(!i2c_get_ack())
                   return;
         
               soft_i2c_write(0);
               if(!i2c_get_ack())
                   return;
           } 
           soft_i2c_write(cap_buffer);
         } 
         else if(i2c_cmd == CMD_OVERRIDE_CAL)          // set calibration table point, (override)
         {
              i2c_give_ack();
              i2c_buf = soft_i2c_read();  
              if(i2c_buf == i2c_cmd + IIC_ADDR)
              { 
                 i2c_give_ack();
                 i2c_rev[0] = soft_i2c_read();// humidity high byte
                 i2c_give_ack();
                 cap_buffer = i2c_rev[0];
               
                 i2c_rev[1] = soft_i2c_read();// humidity low byte
                 i2c_give_ack();
                 cap_buffer += i2c_rev[1];
               
                 i2c_rev[2] = soft_i2c_read();// frequency high byte
                 i2c_give_ack();
                 cap_buffer += i2c_rev[2];
               
                 i2c_rev[3] = soft_i2c_read();// frequency high byte
                 i2c_give_ack();
                 cap_buffer += i2c_rev[3];
                 
                 soft_i2c_write(cap_buffer);
                 
                 insert_cal_pt = 1;
                 serial_receive_watchdog = 1;  
             }
         }
         else
         { 
              i2c_give_ack();
              i2c_buf = soft_i2c_read(); 
              if(i2c_buf == i2c_cmd + IIC_ADDR)
              {
                  i2c_give_ack();
                  offseth = soft_i2c_read();    // high byte of offset data
                  i2c_give_ack();
                  offsetl = soft_i2c_read();    // low byte of offset data
                  i2c_give_ack();    
                  soft_i2c_write(offseth + offsetl);    
                   
                  switch (i2c_cmd)
                  {
                     case CMD_HEATING_CONTROL:
                        if(offsetl == 0)
                        {
                           heating_flag = FALSE;
                          // heat_off();
                        }
                        else
                        {
                           heating_flag = TRUE; 
                           temperature_d = temperature_value + 50; // 5 C
                          // heat_on();
                        }
                        serial_receive_watchdog = 1;
                        break;
                     case CMD_CLEAR_TABLE:
                        serial_receive_watchdog = 1;
                        if(offsetl == 1)
                         //  clear_cal_data(); 
                        break;
                     case CMD_TEMP_CAL: 
                       // calibration_temperature();
                        serial_receive_watchdog = 1; 
                        break;
                     case CMD_HUM_CAL:
                       // if(cal_table_sel == FAC_TABLE)
                          // calibration_humidity();
                        serial_receive_watchdog = 1; 
                        break;
                     case CMD_SN_WRITE:
                       // set_serialnumber();
                        serial_receive_watchdog = 1; 
                        break;
                     case CMD_TAB_SEL:
                        if(offsetl == 0)
                           cal_table_sel = FAC_TABLE;
                        else
                        {
                           cal_table_sel = USER_TABLE;
                           //clear_user_table();
                        }
                        write_eeprom(EEP_CAL_TABLE_SEL,offsetl);
                        serial_receive_watchdog = 1; 
                        break;
                     case CMD_USER_TAB_PT_SET:
                        if(offsetl <= MAX_CAL_POINT) 
                        {
                            humidity_table_counter[USER_TABLE] = offsetl;
                            write_eeprom(EEP_USER_TABLE_COUNTERS, humidity_table_counter[USER_TABLE]);
                            updata_flag = 1;
                        }
                        serial_receive_watchdog = 1; 
                        break;
                     default:
                        break;   
                  }
              }
              else
                  return; 
         } 
    }
    else if(i2c_buf == CMD_READ_VERSION)          // read version
    {
        serial_receive_watchdog = 1;
        i2c_write_version();
    }
       waitCL(HI, 200, XX);
}
//I2C interrupt routine
#int_RA
void external_isr()
{                                                                        
    poll_i2c_bus();
    CLEAR_INTERRUPT(INT_RA4_H2L); //!!!!!!!!be carefore, this chip need clear interrupt flag manually 
}                                         



char waitCL(char state, unsigned int maxcount, char DAstate)
{                              
    waitCLcount = 0;
                                       
    while(1)
    {
        if(!DA_AS_EXPECTED(DAstate))
            return 0;

        if(input(SCL) == state)
            break;

        waitCLcount++;

        if(waitCLcount >= maxcount)
            return 0;
    }

    return 1;
}

char waitDA(char state, unsigned int maxcount, char CLstate)
{
    waitDAcount = 0;

    while(1)
    {
        if(!CL_AS_EXPECTED(CLstate))
            return 0;

        if(input(SDA) == state)
        break;
            waitDAcount++;

        if(waitDAcount >= maxcount)
            return 0;
    }

    return 1;
}

                        

unsigned char soft_i2c_read(void)         
{
    char i, data1 = 0;
    for(i = 0; i < 8; i++)
    {                               
        if(!waitCL(HI, 200, XX))
            return 0;

        // Read bit from data line
        data1 = (data1 << 1) | input(SDA);

        if(!waitCL(LO, 200, XX))
            return 0;
    }

    return data1;
}

// 16-bit write
void soft_i2c_write(unsigned int16 ch)
{
    int8 i = 16;
//    set_tris_a(0xcf);
    do
    {
        // Write bit to data line
        if(ch&0x8000)
            output_high (SDA);
        else
            output_low (SDA);

        if(!waitCL(HI, 200, XX))
        {
            goto i2c_write_exit;
        }

        ch <<= 1;

        if(!waitCL(LO, 200, XX))
        {
            goto i2c_write_exit;
        }

    } while(--i != 0);

i2c_write_exit:
//    set_tris_a(0xdf);    //
       input (SDA);
}

// MDF 12/01/04 - changed so that data line is not changed while clock is high
void i2c_give_ack()
{
//    set_tris_a(0xcf);
    output_low(SDA);

    if(!waitCL(HI, 200, XX))
    {
        goto give_ack_end;
    }

    if(!waitCL(LO, 200, XX))
    {
        goto give_ack_end;
    }

give_ack_end:
       input (SDA);
 //   set_tris_a(0xdf);
    return;
}

int1 i2c_get_ack()
{
    short ack;

    if(!waitCL(HI, 200, XX))
    {
        return 0;
    }

    ack = !input(SDA);

    if(!waitCL(LO, 200, XX))
    {
        return 0;
    }

    if(!waitDA(HI, 200, LO))
    {
        return 0;
    }

    return ack;
}

void i2c_write_data()
{
    i2c_give_ack();
    
    soft_i2c_write(humidity_value);            // humidity
    if(!i2c_get_ack())
        return;
    
    soft_i2c_write((int16)temperature_value);   // temperature
    if(!i2c_get_ack())
        return;

    soft_i2c_write(humidity_frequency);         // humidity frequency
    if(!i2c_get_ack())   
        return;                                               
                               
    soft_i2c_write(humidity_table_counter[cal_table_sel]);      // humidity table counter
    if(!i2c_get_ack())
        return;
    
    soft_i2c_write(dew_pt);                                      // dew point
    if(!i2c_get_ack())
        return;
    
    soft_i2c_write(humidity_value + (int16)temperature_value + humidity_frequency + humidity_table_counter[cal_table_sel] + (int16)dew_pt); 
    return;
}
void i2c_write_para(int16 buf)
{ 
     i2c_give_ack();
     soft_i2c_write(buf);
     if(!i2c_get_ack())   
        return;                                               
                            
     soft_i2c_write(0x55);
     if(!i2c_get_ack())
        return;
      
     soft_i2c_write(buf + 0x55);
}
// MDF 12/01/04
void i2c_write_version()
{
    // Write data to the bus and receive ACK each time
    i2c_give_ack();
    soft_i2c_write(PIC_VERSION);

    if(!i2c_get_ack())
        return;
    soft_i2c_write(0x69);
    return;
}

int16 tem_filter_reading()
{
    int16 tem_read_buf;
    datacore = 0;         
    for(sampling_counter = 0; sampling_counter < TEM_SAMPLING_TIMES; sampling_counter++)
    {
        tem_read_buf = read_adc();
        datacore += tem_read_buf;
        if(sampling_counter == 0)
        {
            min = tem_read_buf;
            max = tem_read_buf;
        }
        else  
        {
            min = min < tem_read_buf ? min : tem_read_buf;
            max = max > tem_read_buf ? max : tem_read_buf;
        }
    }
    tem_read_buf = (datacore - min - max) / (TEM_SAMPLING_TIMES - 2);
    return tem_read_buf;
}                
 
 
int16 hum_filter_reading()
{
    int16 hum_read_buf = 0;
    
    if(first_time_run)
    {
      hum_read_buf = record_hum_buffer;  
    }
    else
    {
       datacore = 0;
   
       //disable_interrupts(int_RA4);
   //    INTCON &=0XF7;
       min = read_hum_buffer[0];
       max = read_hum_buffer[0];
       
       for(sampling_counter = 0; sampling_counter < HUM_SAMPLING_TIMES; sampling_counter++)
       {                                      
    //       reset_hum_sensor_reading();
    //       while(!read_hum_end);
   
            
             datacore += read_hum_buffer[sampling_counter];
   
                
             min = min < read_hum_buffer[sampling_counter] ? min : read_hum_buffer[sampling_counter];
             max = max > read_hum_buffer[sampling_counter] ? max : read_hum_buffer[sampling_counter];    
                
                                                       
       }
       hum_read_buf = (datacore - min - max) / (HUM_SAMPLING_TIMES - 2 );
       
    } 
                                             

    return hum_read_buf;      
}     

void ext_int_inital(void)
{
    enable_interrupts(INT_RA4_H2L);        //i2c data pin, for i2c interrupt
    enable_interrupts(GLOBAL);
    input(SDA);
    input(SCL);    
}

void main()
{
   modbus_init();
   
   ext_int_inital();
   
   while(TRUE)
   {

      //Example blinking LED program
      output_low(LED);
      delay_ms(DELAY);
      output_high(LED);
      delay_ms(DELAY);

      //TODO: User Code
      modbus_read_holding_registers(0xff,0x00,0x06);
   }


}











