C L "MAIN" 0 28 1 "FUNCTION"
D G "__PCM__" 0 86 ""5.071""
D G "__DEVICE__" 0 86 "1825"
D G "__DATE__" 0 86 ""31-ÆßÔÂ-17""
D G "__TIME__" 0 86 ""11:15:15""
D G "_UNICODE" 0 86 ""?""
D G "__EVAL" 0 86 ""?"" "Standard Header file for the PIC16F1825 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 39 ""
v L "value" 2 39 "int8" `55 
f B "set_tris_a" 2 39 "void(int8 value)" `54 
f N "set_tris_c" 2 40 ""
v L "value" 2 40 "int8" `57 
f B "set_tris_c" 2 40 "void(int8 value)" `56 
f N "set_input_level_a" 2 41 ""
v L "value" 2 41 "int8" `59 
f B "set_input_level_a" 2 41 "void(int8 value)" `58 
f N "set_input_level_c" 2 42 ""
v L "value" 2 42 "int8" `61 
f B "set_input_level_c" 2 42 "void(int8 value)" `60 
f N "get_tris_a" 2 43 ""
f B "get_tris_a" 2 43 "int8()" `62 
f N "get_tris_c" 2 44 ""
f B "get_tris_c" 2 44 "int8()" `63 
f N "output_a" 2 45 ""
v L "value" 2 45 "int8" `65 
f B "output_a" 2 45 "void(int8 value)" `64 
f N "output_c" 2 46 ""
v L "value" 2 46 "int8" `67 
f B "output_c" 2 46 "void(int8 value)" `66 
f N "input_a" 2 47 ""
f B "input_a" 2 47 "int8()" `68 
f N "input_c" 2 48 ""
f B "input_c" 2 48 "int8()" `69 
f N "input_change_a" 2 49 ""
f B "input_change_a" 2 49 "int8()" `70 
f N "input_change_c" 2 50 ""
f B "input_change_c" 2 50 "int8()" `71 
f N "port_a_pullups" 2 51 ""
v L "upmask" 2 51 "int8" `73 
f B "port_a_pullups" 2 51 "void(int8 upmask)" `72 
f N "port_b_pullups" 2 52 ""
v L "value" 2 52 "int8" `75 
f B "port_b_pullups" 2 52 "void(int8 value)" `74 
f N "port_c_pullups" 2 53 ""
v L "upmask" 2 53 "int8" `77 
f B "port_c_pullups" 2 53 "void(int8 upmask)" `76 
f N "input" 2 54 ""
v L "pin" 2 54 "int16" `79 
f B "input" 2 54 "int8(int16 pin)" `78 
f N "input_state" 2 55 ""
v L "pin" 2 55 "int16" `81 
f B "input_state" 2 55 "int8(int16 pin)" `80 
f N "output_low" 2 56 ""
v L "pin" 2 56 "int16" `83 
f B "output_low" 2 56 "void(int16 pin)" `82 
f N "output_high" 2 57 ""
v L "pin" 2 57 "int16" `85 
f B "output_high" 2 57 "void(int16 pin)" `84 
f N "output_toggle" 2 58 ""
v L "pin" 2 58 "int16" `87 
f B "output_toggle" 2 58 "void(int16 pin)" `86 
f N "output_bit" 2 59 ""
v L "pin" 2 59 "int16" `89 
v L "level" 2 59 "int8" `90 
f B "output_bit" 2 59 "void(int16 pin,int8 level)" `88 
f N "output_float" 2 60 ""
v L "pin" 2 60 "int16" `92 
f B "output_float" 2 60 "void(int16 pin)" `91 
f N "output_drive" 2 61 ""
v L "pin" 2 61 "int16" `94 
f B "output_drive" 2 61 "void(int16 pin)" `93  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 65 "96"
d G "PIN_A1" 2 66 "97"
d G "PIN_A2" 2 67 "98"
d G "PIN_A3" 2 68 "99"
d G "PIN_A4" 2 69 "100"
d G "PIN_A5" 2 70 "101"
d G "PIN_C0" 2 72 "112"
d G "PIN_C1" 2 73 "113"
d G "PIN_C2" 2 74 "114"
d G "PIN_C3" 2 75 "115"
d G "PIN_C4" 2 76 "116"
d G "PIN_C5" 2 77 "117"
d G "FALSE" 2 80 "0"
d G "TRUE" 2 81 "1"
d G "BYTE" 2 83 "int8"
d G "BOOLEAN" 2 84 "int1"
d G "getc" 2 86 "getch"
d G "fgetc" 2 87 "getch"
d G "getchar" 2 88 "getch"
d G "putc" 2 89 "putchar"
d G "fputc" 2 90 "putchar"
d G "fgets" 2 91 "gets"
d G "fputs" 2 92 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 97 ""
f B "restart_cause" 2 97 "int8()" `95 
f N "reset_cpu" 2 98 ""
f B "reset_cpu" 2 98 "void()" `96 
f N "sleep" 2 99 ""
f B "sleep" 2 99 "void()" `97  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 2 101 "0x3C"
d G "MCLR_FROM_POWER_UP" 2 102 "0x34"
d G "BROWNOUT_RESTART" 2 103 "0x3E"
d G "MCLR_FROM_SLEEP" 2 104 "0x27"
d G "WDT_TIMEOUT" 2 105 "0x1F"
d G "WDT_FROM_SLEEP" 2 106 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 2 107 "0x2F"
d G "MCLR_FROM_RUN" 2 108 "0x37"
d G "RESET_INSTRUCTION" 2 109 "0x3B"
d G "STACK_OVERFLOW" 2 110 "0xBF"
d G "STACK_UNDERFLOW" 2 111 "0x7F"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 118 ""
v L "mode" 2 118 "int8" `99 
f B "setup_timer_0" 2 118 "void(int8 mode)" `98 
f N "set_timer0" 2 119 ""
v L "value" 2 119 "int8" `101 
f B "set_timer0" 2 119 "void(int8 value)" `100 
f N "get_timer0" 2 120 ""
f B "get_timer0" 2 120 "int8()" `102 
f N "setup_counters" 2 121 ""
v L "mode" 2 121 "int8" `104 
v L "prescaler" 2 121 "int8" `105 
f B "setup_counters" 2 121 "void(int8 mode,int8 prescaler)" `103 
f N "set_rtcc" 2 122 ""
v L "value" 2 122 "int8" `107 
f B "set_rtcc" 2 122 "void(int8 value)" `106 
f N "get_rtcc" 2 123 ""
f B "get_rtcc" 2 123 "int8()" `108  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 125 "0"
d G "T0_EXT_L_TO_H" 2 126 "32"
d G "T0_EXT_H_TO_L" 2 127 "48"
d G "T0_DIV_1" 2 129 "8"
d G "T0_DIV_2" 2 130 "0"
d G "T0_DIV_4" 2 131 "1"
d G "T0_DIV_8" 2 132 "2"
d G "T0_DIV_16" 2 133 "3"
d G "T0_DIV_32" 2 134 "4"
d G "T0_DIV_64" 2 135 "5"
d G "T0_DIV_128" 2 136 "6"
d G "T0_DIV_256" 2 137 "7"
d G "T0_8_BIT" 2 140 "0"
d G "RTCC_INTERNAL" 2 144 "0"
d G "RTCC_EXT_L_TO_H" 2 145 "32"
d G "RTCC_EXT_H_TO_L" 2 146 "48"
d G "RTCC_DIV_1" 2 147 "8"
d G "RTCC_DIV_2" 2 148 "0"
d G "RTCC_DIV_4" 2 149 "1"
d G "RTCC_DIV_8" 2 150 "2"
d G "RTCC_DIV_16" 2 151 "3"
d G "RTCC_DIV_32" 2 152 "4"
d G "RTCC_DIV_64" 2 153 "5"
d G "RTCC_DIV_128" 2 154 "6"
d G "RTCC_DIV_256" 2 155 "7"
d G "RTCC_8_BIT" 2 156 "0"
c L "get_rtcc" 2 3 7 "FUNCTION"
f N "setup_wdt" 2 166 ""
v L "mode" 2 166 "int16" `110 
f B "setup_wdt" 2 166 "void(int16 mode)" `109 
f N "restart_wdt" 2 167 ""
f B "restart_wdt" 2 167 "void()" `111  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 169 "0x1000"
d G "WDT_OFF" 2 170 "0x2000"
d G "WDT_1MS" 2 172 "0x100"
d G "WDT_2MS" 2 173 "0x101"
d G "WDT_4MS" 2 174 "0x102"
d G "WDT_8MS" 2 175 "0x103"
d G "WDT_16MS" 2 176 "0x104"
d G "WDT_32MS" 2 177 "0x105"
d G "WDT_64MS" 2 178 "0x106"
d G "WDT_128MS" 2 179 "0x107"
d G "WDT_256MS" 2 180 "0x108"
d G "WDT_512MS" 2 181 "0x109"
d G "WDT_1S" 2 182 "0x10A"
d G "WDT_2S" 2 183 "0x10B"
d G "WDT_4S" 2 184 "0x10C"
d G "WDT_8S" 2 185 "0x10D"
d G "WDT_16S" 2 186 "0x10E"
d G "WDT_32S" 2 187 "0x10F"
d G "WDT_64S" 2 188 "0x110"
d G "WDT_128S" 2 189 "0x111"
d G "WDT_256S" 2 190 "0x112"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 195 ""
v L "mode" 2 195 "int16" `113 
f B "setup_timer_1" 2 195 "void(int16 mode)" `112 
f N "get_timer1" 2 196 ""
f B "get_timer1" 2 196 "int16()" `114 
f N "set_timer1" 2 197 ""
v L "value" 2 197 "int16" `116 
f B "set_timer1" 2 197 "void(int16 value)" `115  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 200 "0"
d G "T1_CAPSENSE" 2 201 "0xC5"
d G "T1_EXTERNAL" 2 202 "0x85"
d G "T1_EXTERNAL_SYNC" 2 203 "0x81"
d G "T1_FOSC" 2 204 "0x45"
d G "T1_INTERNAL" 2 205 "0x05"
d G "T1_ENABLE_T1OSC" 2 207 "0x08"
d G "T1_DIV_BY_1" 2 209 "0x00"
d G "T1_DIV_BY_2" 2 210 "0x10"
d G "T1_DIV_BY_4" 2 211 "0x20"
d G "T1_DIV_BY_8" 2 212 "0x30"
d G "T1_GATE" 2 214 "0x8000"
d G "T1_GATE_INVERTED" 2 215 "0xC000"
d G "T1_GATE_TOGGLE" 2 216 "0xA000"
d G "T1_GATE_SINGLE" 2 217 "0x9000"
d G "T1_GATE_TIMER0" 2 218 "0x8100"
d G "T1_GATE_COMP1" 2 219 "0x8200"
d G "T1_GATE_COMP2" 2 220 "0x8300"
d G "T1_GATE_A4" 2 222 "0"
d G "T1_GATE_A3" 2 223 "0x10000"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 228 ""
v L "mode" 2 228 "int8" `118 
v L "period" 2 228 "int8" `119 
v L "postscale" 2 228 "int8" `120 
f B "setup_timer_2" 2 228 "void(int8 mode,int8 period,int8 postscale)" `117 
f N "get_timer2" 2 229 ""
f B "get_timer2" 2 229 "int8()" `121 
f N "set_timer2" 2 230 ""
v L "value" 2 230 "int8" `123 
f B "set_timer2" 2 230 "void(int8 value)" `122  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 232 "0"
d G "T2_DIV_BY_1" 2 233 "4"
d G "T2_DIV_BY_4" 2 234 "5"
d G "T2_DIV_BY_16" 2 235 "6"
d G "T2_DIV_BY_64" 2 236 "7"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_timer_4" 2 241 ""
v L "mode" 2 241 "int16" `125 
v L "period" 2 241 "int8" `126 
v L "postscaler" 2 241 "int8" `127 
f B "setup_timer_4" 2 241 "void(int16 mode,int8 period,int8 postscaler)" `124 
f N "get_timer4" 2 242 ""
f B "get_timer4" 2 242 "int8()" `128 
f N "set_timer4" 2 243 ""
v L "value" 2 243 "int8" `130 
f B "set_timer4" 2 243 "void(int8 value)" `129  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 2 245 "0"
d G "T4_DIV_BY_1" 2 246 "4"
d G "T4_DIV_BY_4" 2 247 "5"
d G "T4_DIV_BY_16" 2 248 "6"
d G "T4_DIV_BY_64" 2 249 "7"
c L "set_timer4" 2 3 3 "FUNCTION"
f N "setup_timer_6" 2 254 ""
v L "mode" 2 254 "int16" `132 
v L "period" 2 254 "int8" `133 
v L "postscaler" 2 254 "int8" `134 
f B "setup_timer_6" 2 254 "void(int16 mode,int8 period,int8 postscaler)" `131 
f N "get_timer6" 2 255 ""
f B "get_timer6" 2 255 "int8()" `135 
f N "set_timer6" 2 256 ""
v L "value" 2 256 "int8" `137 
f B "set_timer6" 2 256 "void(int8 value)" `136  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 2 259 "0"
d G "T6_DIV_BY_1" 2 260 "4"
d G "T6_DIV_BY_4" 2 261 "5"
d G "T6_DIV_BY_16" 2 262 "6"
d G "T6_DIV_BY_64" 2 263 "7"
c L "set_timer6" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 269 ""
v L "mode" 2 269 "int32" `139 
f B "setup_ccp1" 2 269 "void(int32 mode)" `138 
f N "setup_ccp1" 2 270 ""
v L "mode" 2 270 "int32" `141 
v L "pwm" 2 270 "int8" `142 
f B "setup_ccp1" 2 270 "void(int32 mode,int8 pwm)" `140 
f N "set_pwm1_duty" 2 271 ""
v L "value" 2 271 "int16" `144 
f B "set_pwm1_duty" 2 271 "void(int16 value)" `143  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 273 "0"
d G "CCP_CAPTURE_FE" 2 274 "0x04"
d G "CCP_CAPTURE_RE" 2 275 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 276 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 277 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 278 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 279 "0x09"
d G "CCP_COMPARE_INT" 2 280 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 2 281 "0x0B"
d G "CCP_PWM" 2 282 "0x0C"
d G "CCP_PWM_PLUS_1" 2 283 "0x1c"
d G "CCP_PWM_PLUS_2" 2 284 "0x2c"
d G "CCP_PWM_PLUS_3" 2 285 "0x3c"
d G "CCP_PWM_H_H" 2 291 "0x0c"
d G "CCP_PWM_H_L" 2 292 "0x0d"
d G "CCP_PWM_L_H" 2 293 "0x0e"
d G "CCP_PWM_L_L" 2 294 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 296 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 297 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 298 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 300 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 301 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 302 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 303 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 304 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 305 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 306 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 308 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 309 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 310 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 312 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 313 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 314 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 316 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 318 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 319 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 320 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 321 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 322 "0x10000000"
d G "CCP_TIMER2" 2 325 "0x0000"
d G "CCP_TIMER4" 2 326 "0x1000"
d G "CCP_TIMER6" 2 327 "0x2000"
d G "CCP_P1C_C3" 2 329 "0x000"
d G "CCP_P1C_C1" 2 330 "0x100"
d G "CCP_P1D_C2" 2 331 "0x000"
d G "CCP_P1D_C0" 2 332 "0x200"
d G "CCP2_C3" 2 333 "0x000"
d G "CCP2_A5" 2 334 "0x100"
d G "CCP_P2B_C2" 2 335 "0x000"
d G "CCP_P2B_A4" 2 336 "0x200"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 340 ""
v L "mode" 2 340 "int32" `149 
f B "setup_ccp2" 2 340 "void(int32 mode)" `148 
f N "setup_ccp2" 2 341 ""
v L "mode" 2 341 "int32" `151 
v L "pwm" 2 341 "int8" `152 
f B "setup_ccp2" 2 341 "void(int32 mode,int8 pwm)" `150 
f N "set_pwm2_duty" 2 342 ""
v L "value" 2 342 "int16" `154 
f B "set_pwm2_duty" 2 342 "void(int16 value)" `153 
c L "set_pwm2_duty" 2 3 1 "FUNCTION"
f N "setup_ccp3" 2 348 ""
v L "mode" 2 348 "int32" `159 
f B "setup_ccp3" 2 348 "void(int32 mode)" `158 
f N "setup_ccp3" 2 349 ""
v L "mode" 2 349 "int32" `161 
v L "pwm" 2 349 "int8" `162 
f B "setup_ccp3" 2 349 "void(int32 mode,int8 pwm)" `160 
f N "set_pwm3_duty" 2 350 ""
v L "value" 2 350 "int16" `164 
f B "set_pwm3_duty" 2 350 "void(int16 value)" `163 
c L "set_pwm3_duty" 2 3 1 "FUNCTION"
f N "setup_ccp4" 2 356 ""
v L "mode" 2 356 "int32" `169 
f B "setup_ccp4" 2 356 "void(int32 mode)" `168 
f N "setup_ccp4" 2 357 ""
v L "mode" 2 357 "int32" `171 
v L "pwm" 2 357 "int8" `172 
f B "setup_ccp4" 2 357 "void(int32 mode,int8 pwm)" `170 
f N "set_pwm4_duty" 2 358 ""
v L "value" 2 358 "int16" `174 
f B "set_pwm4_duty" 2 358 "void(int16 value)" `173 
c L "set_pwm4_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 365 ""
v L "mode" 2 365 "int32" `179 
f B "setup_spi" 2 365 "void(int32 mode)" `178 
f N "spi_write" 2 366 ""
v L "value" 2 366 "int8" `181 
f B "spi_write" 2 366 "void(int8 value)" `180 
f N "spi_read" 2 367 ""
f B "spi_read" 2 367 "int8()" `182 
f N "spi_read" 2 368 ""
v L "value" 2 368 "int8" `184 
f B "spi_read" 2 368 "int8(int8 value)" `183 
f N "spi_data_is_in" 2 369 ""
f B "spi_data_is_in" 2 369 "int8()" `185  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 371 "0x00"
d G "SPI_MASTER" 2 372 "0x20"
d G "SPI_SLAVE" 2 373 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 374 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 375 "0x00"
d G "SPI_CLK_DIV_4" 2 376 "0x00"
d G "SPI_CLK_DIV_16" 2 377 "0x01"
d G "SPI_CLK_DIV_64" 2 378 "0x02"
d G "SPI_CLK_T2" 2 379 "0x03"
d G "SPI_SS_DISABLED" 2 380 "0x01"
d G "SPI_DO_C2" 2 382 "0x00000"
d G "SPI_DO_A4" 2 383 "0x10000"
d G "SPI_SS_C3" 2 384 "0x00000"
d G "SPI_SS_A3" 2 385 "0x20000"
d G "SPI_XMIT_L_TO_H" 2 387 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 388 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 390 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 391 "0x8000"
d G "SPI_L_TO_H" 2 394 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 395 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 2 3 2 "FUNCTION"
f N "setup_uart" 2 399 ""
v L "baud" 2 399 "int32" `187 
f B "setup_uart" 2 399 "void(int32 baud)" `186 
f N "setup_uart" 2 400 ""
v L "baud" 2 400 "int32" `189 
v L "stream" 2 400 "int8" `190 
f B "setup_uart" 2 400 "void(int32 baud,int8 stream)" `188 
f N "setup_uart" 2 401 ""
v L "baud" 2 401 "int32" `192 
v L "stream" 2 401 "int8" `193 
v L "clock" 2 401 "int32" `194 
f B "setup_uart" 2 401 "void(int32 baud,int8 stream,int32 clock)" `191 
f N "set_uart_speed" 2 402 ""
v L "baud" 2 402 "int32" `196 
f B "set_uart_speed" 2 402 "void(int32 baud)" `195 
f N "set_uart_speed" 2 403 ""
v L "baud" 2 403 "int32" `198 
v L "stream" 2 403 "int8" `199 
f B "set_uart_speed" 2 403 "void(int32 baud,int8 stream)" `197 
f N "set_uart_speed" 2 404 ""
v L "baud" 2 404 "int32" `201 
v L "stream" 2 404 "int8" `202 
v L "clock" 2 404 "int32" `203 
f B "set_uart_speed" 2 404 "void(int32 baud,int8 stream,int32 clock)" `200  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 408 "2"
d G "UART_DATA" 2 409 "4"
d G "UART_AUTODETECT" 2 410 "8"
d G "UART_AUTODETECT_NOWAIT" 2 411 "9"
d G "UART_WAKEUP_ON_RDA" 2 412 "10"
d G "UART_SEND_BREAK" 2 413 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 417 ""
v L "mode" 2 417 "int32" `205 
f B "setup_comparator" 2 417 "void(int32 mode)" `204  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 420 "0x00"
d G "CP1_A1_A0" 2 423 "0x8000"
d G "CP1_C1_A0" 2 424 "0x8001"
d G "CP1_C2_A0" 2 425 "0x8002"
d G "CP1_C3_A0" 2 426 "0x8003"
d G "CP1_A1_DAC" 2 427 "0x8010"
d G "CP1_C1_DAC" 2 428 "0x8011"
d G "CP1_C2_DAC" 2 429 "0x8012"
d G "CP1_C3_DAC" 2 430 "0x8013"
d G "CP1_A1_FVR" 2 431 "0x8020"
d G "CP1_C1_FVR" 2 432 "0x8021"
d G "CP1_C2_FVR" 2 433 "0x8022"
d G "CP1_C3_FVR" 2 434 "0x8023"
d G "CP1_A1_VSS" 2 435 "0x8030"
d G "CP1_C1_VSS" 2 436 "0x8031"
d G "CP1_C2_VSS" 2 437 "0x8032"
d G "CP1_C3_VSS" 2 438 "0x8033"
d G "CP1_INT_L2H" 2 440 "0x0080"
d G "CP1_INT_H2L" 2 441 "0x0040"
d G "CP1_OUT_ON_A2" 2 442 "0x2000"
d G "CP1_INVERT" 2 443 "0x1000"
d G "CP1_FAST" 2 444 "0x0400"
d G "CP1_HYST" 2 445 "0x0200"
d G "CP1_SYNC" 2 446 "0x0100"
d G "CP2_A1_C0" 2 449 "0x80000000"
d G "CP2_C1_C0" 2 450 "0x80010000"
d G "CP2_C2_C0" 2 451 "0x80020000"
d G "CP2_C3_C0" 2 452 "0x80030000"
d G "CP2_A1_DAC" 2 453 "0x80100000"
d G "CP2_C1_DAC" 2 454 "0x80110000"
d G "CP2_C2_DAC" 2 455 "0x80120000"
d G "CP2_C3_DAC" 2 456 "0x80130000"
d G "CP2_A1_FVR" 2 457 "0x80200000"
d G "CP2_C1_FVR" 2 458 "0x80210000"
d G "CP2_C2_FVR" 2 459 "0x80220000"
d G "CP2_C3_FVR" 2 460 "0x80230000"
d G "CP2_A1_VSS" 2 461 "0x80300000"
d G "CP2_C1_VSS" 2 462 "0x80310000"
d G "CP2_C2_VSS" 2 463 "0x80320000"
d G "CP2_C3_VSS" 2 464 "0x80330000"
d G "CP2_INT_L2H" 2 466 "0x00800000"
d G "CP2_INT_H2L" 2 467 "0x00400000"
d G "CP2_OUT_ON_C4" 2 468 "0x20000000"
d G "CP2_INVERT" 2 469 "0x10000000"
d G "CP2_FAST" 2 470 "0x04000000"
d G "CP2_HYST" 2 471 "0x02000000"
d G "CP2_SYNC" 2 472 "0x01000000"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 479 ""
v L "mode" 2 479 "int8" `209 
f B "setup_vref" 2 479 "void(int8 mode)" `208  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 481 "0"
d G "VREF_ON" 2 482 "0x80"
d G "VREF_ADC_OFF" 2 484 "0"
d G "VREF_ADC_1v024" 2 485 "0x81"
d G "VREF_ADC_2v048" 2 486 "0x82"
d G "VREF_ADC_4v096" 2 487 "0x83"
d G "VREF_COMP_DAC_OFF" 2 489 "0"
d G "VREF_COMP_DAC_1v024" 2 490 "0x84"
d G "VREF_COMP_DAC_2v048" 2 491 "0x88"
d G "VREF_COMP_DAC_4v096" 2 492 "0x8C"
d G "TEMPERATURE_INDICATOR_DISABLED" 2 494 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 2 495 "0x20"
d G "TEMPERATURE_RANGE_LOW" 2 496 "0"
d G "TEMPERATURE_RANGE_HIGH" 2 497 "0x10"
c L "setup_vref" 2 3 3 "FUNCTION"
f N "setup_dac" 2 502 ""
v L "mode" 2 502 "int8" `211 
f B "setup_dac" 2 502 "void(int8 mode)" `210 
f N "dac_write" 2 503 ""
v L "value" 2 503 "int8" `213 
f B "dac_write" 2 503 "void(int8 value)" `212  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 2 505 "0"
d G "DAC_VSS_VDD" 2 506 "0x80"
d G "DAC_VREF_VDD" 2 507 "0x81"
d G "DAC_VSS_VREF" 2 508 "0x84"
d G "DAC_VREF_VREF" 2 509 "0x85"
d G "DAC_VSS_FVR" 2 510 "0x88"
d G "DAC_VREF_FVR" 2 511 "0x89"
d G "DAC_OUTPUT" 2 513 "0x20"
d G "DAC_LVP_POS" 2 514 "0x40"
d G "DAC_LVP_NEG" 2 515 "0"
c L "dac_write" 2 3 3 "FUNCTION"
f N "setup_dsm" 2 520 ""
v L "enable" 2 520 "int8" `215 
f B "setup_dsm" 2 520 "void(int8 enable)" `214 
f N "setup_dsm" 2 521 ""
v L "mode" 2 521 "int8" `217 
v L "source" 2 521 "int8" `218 
f B "setup_dsm" 2 521 "void(int8 mode,int8 source)" `216 
f N "setup_dsm" 2 522 ""
v L "mode" 2 522 "int8" `220 
v L "source" 2 522 "int8" `221 
v L "carrier" 2 522 "int16" `222 
f B "setup_dsm" 2 522 "void(int8 mode,int8 source,int16 carrier)" `219  "Constants used in SETUP_DSM() first parameter are:"
d G "DSM_ENABLED" 2 524 "0x80"
d G "DSM_DISABLED" 2 525 "0x00"
d G "DSM_OUTPUT_ENABLED" 2 526 "0x40"
d G "DSM_SLEW_RATE_LIMITING_ENABLED" 2 527 "0x20"
d G "DSM_OUTPUT_INVERTED" 2 528 "0x10"
d G "DSM_SOURCE_MANUAL" 2 530 "0x00"
d G "DSM_SOURCE_MDMIN" 2 531 "0x01"
d G "DSM_SOURCE_CCP1" 2 532 "0x02"
d G "DSM_SOURCE_CCP2" 2 533 "0x03"
d G "DSM_SOURCE_CCP3" 2 534 "0x04"
d G "DSM_SOURCE_CCP4" 2 535 "0x05"
d G "DSM_SOURCE_COMP1" 2 536 "0x06"
d G "DSM_SOURCE_COMP2" 2 537 "0x07"
d G "DSM_SOURCE_SPI1" 2 538 "0x08"
d G "DSM_SOURCE_SPI2" 2 539 "0x09"
d G "DSM_SOURCE_UART1" 2 540 "0x0A"
d G "DSM_DISABLE_SOURCE" 2 541 "0x80"
d G "DSM_CARRIER_LOW_VSS" 2 543 "0x0000"
d G "DSM_CARRIER_LOW_MDCIN1" 2 544 "0x0001"
d G "DSM_CARRIER_LOW_MDCIN2" 2 545 "0x0002"
d G "DSM_CARRIER_LOW_REFO" 2 546 "0x0003"
d G "DSM_CARRIER_LOW_CCP1" 2 547 "0x0004"
d G "DSM_CARRIER_LOW_CCP2" 2 548 "0x0005"
d G "DSM_CARRIER_LOW_CCP3" 2 549 "0x0006"
d G "DSM_CARRIER_LOW_CCP4" 2 550 "0x0007"
d G "DSM_SYNC_CARRIER_LOW" 2 551 "0x0020"
d G "DSM_INVERT_CARRIER_LOW" 2 552 "0x0040"
d G "DSM_DISABLE_CARRIER_LOW" 2 553 "0x0080"
d G "DSM_CARRIER_HIGH_VSS" 2 554 "0x0000"
d G "DSM_CARRIER_HIGH_MDCIN1" 2 555 "0x0100"
d G "DSM_CARRIER_HIGH_MDCIN2" 2 556 "0x0200"
d G "DSM_CARRIER_HIGH_REFO" 2 557 "0x0300"
d G "DSM_CARRIER_HIGH_CCP1" 2 558 "0x0400"
d G "DSM_CARRIER_HIGH_CCP2" 2 559 "0x0500"
d G "DSM_CARRIER_HIGH_CCP3" 2 560 "0x0600"
d G "DSM_CARRIER_HIGH_CCP4" 2 561 "0x0700"
d G "DSM_SYNC_CARRIER_HIGH" 2 562 "0x2000"
d G "DSM_INVERT_CARRIER_HIGH" 2 563 "0x4000"
d G "DSM_DISABLE_CARRIER_HIGH" 2 564 "0x8000"
c L "setup_dsm" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 572 ""
v L "mode" 2 572 "int8" `226 
f B "setup_oscillator" 2 572 "void(int8 mode)" `225  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 575 "0"
d G "OSC_31250" 2 576 " (2*8)"
d G "OSC_62KHZ" 2 577 " (4*8)"
d G "OSC_125KHZ" 2 578 " (5*8)"
d G "OSC_250KHZ" 2 579 " (6*8)"
d G "OSC_500KHZ" 2 580 " (7*8)"
d G "OSC_1MHZ" 2 581 " (11*8)"
d G "OSC_2MHZ" 2 582 " (12*8)"
d G "OSC_4MHZ" 2 583 " (13*8)"
d G "OSC_8MHZ" 2 584 " (14*8)"
d G "OSC_16MHZ" 2 585 " (15*8)"
d G "OSC_TIMER1" 2 587 "1"
d G "OSC_INTRC" 2 588 "2"
d G "OSC_NORMAL" 2 589 "0"
d G "OSC_PLL_ON" 2 591 "0x80"
d G "OSC_PLL_OFF" 2 592 "0"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 599 ""
v L "mode" 2 599 "int16" `228 
f B "setup_adc" 2 599 "void(int16 mode)" `227 
f N "read_adc" 2 600 ""
f B "read_adc" 2 600 "int8()" `229 
f N "read_adc" 2 601 ""
v L "mode" 2 601 "int8" `231 
f B "read_adc" 2 601 "int8(int8 mode)" `230 
f N "read_adc" 2 602 ""
f G "read_adc" 2 602 "int16()" `232 
f N "read_adc" 2 603 ""
v L "mode" 2 603 "int8" `233 
f G "read_adc" 2 603 "int16(int8 mode,int32 pins)" `232 
f N "adc_done" 2 604 ""
f B "adc_done" 2 604 "int8(int8 mode,int32 pins)" `232  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 606 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 607 "0x100"
d G "ADC_CLOCK_DIV_4" 2 608 "0x40"
d G "ADC_CLOCK_DIV_8" 2 609 "0x10"
d G "ADC_CLOCK_DIV_32" 2 610 "0x20"
d G "ADC_CLOCK_DIV_16" 2 611 "0x50"
d G "ADC_CLOCK_DIV_64" 2 612 "0x60"
d G "ADC_CLOCK_INTERNAL" 2 613 "0x30" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 616 ""
v L "pins" 2 616 "int32" `234 
f B "setup_adc_ports" 2 616 "void(int32 pins)" `233 
f N "setup_adc_ports" 2 617 ""
v L "pins" 2 617 "int32" `236 
v L "reference" 2 617 "int32" `237 
f B "setup_adc_ports" 2 617 "void(int32 pins,int32 reference)" `235 
f N "set_analog_pins" 2 618 ""
v L "pin" 2 618 "int8" `239 
f B "set_analog_pins" 2 618 "void(int8 pin,*int8 _VA_LIST)" `238 
f N "setup_adc_reference" 2 619 ""
v L "reference" 2 619 "int32" `242 
f B "setup_adc_reference" 2 619 "void(int32 reference)" `241 
f N "set_adc_channel" 2 620 ""
v L "channel" 2 620 "int8" `244 
f B "set_adc_channel" 2 620 "void(int8 channel)" `243  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 624 "0x00010000" "| A0"
d G "sAN1" 2 625 "0x00020000" "| A1"
d G "sAN2" 2 626 "0x00040000" "| A2"
d G "sAN3" 2 627 "0x00100000" "| A4"
d G "sAN4" 2 628 "0x00000100" "| C0"
d G "sAN5" 2 629 "0x00000200" "| C1"
d G "sAN6" 2 630 "0x00000400" "| C2"
d G "sAN7" 2 631 "0x00000800" "| C3"
d G "NO_ANALOGS" 2 632 "0" "None"
d G "ALL_ANALOG" 2 633 "0x00170F00" "A0 A1 A2 A4 C0 C1 C2 C3"
d G "VSS_VDD" 2 636 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 2 637 "0x02000000" "| Range 0-VrefH"
d G "VSS_FVR" 2 638 "0x03000000" "| Range 0-Fixed Voltage Reference"
d G "VREF_VDD" 2 639 "0x04000000" "| Range VrefL-Vdd"
d G "VREF_VREF" 2 640 "0x06000000" "| Range VrefL-VrefH"
d G "VREF_FVR" 2 641 "0x07000000" "| Range VrefL-Fixed Voltage Reference"
d G "TEMPERATURE_INDICATOR" 2 645 "0x1D"
d G "DAC_CHANNEL" 2 646 "0x1E"
d G "FVR_CHANNEL" 2 647 "0x1F"
d G "ADC_START_AND_READ" 2 650 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 651 "1"
d G "ADC_READ_ONLY" 2 652 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 658 ""
v L "x" 2 658 "sint8" `246 
f B "abs" 2 658 "sint8(sint8 x)" `245 
f N "abs" 2 659 ""
v L "x" 2 659 "sint16" `248 
f B "abs" 2 659 "sint16(sint16 x)" `247 
f N "abs" 2 660 ""
v L "x" 2 660 "sint32" `250 
f B "abs" 2 660 "sint32(sint32 x)" `249 
f N "abs" 2 661 ""
v L "x" 2 661 "float" `252 
f B "abs" 2 661 "float(float x)" `251 
f N "_mul" 2 662 ""
v L "??65535" 2 662 "int8" `254 
v L "??65535" 2 662 "int8" `255 
f B "_mul" 2 662 "int16(int8 ,int8 )" `253 
f N "_mul" 2 663 ""
v L "??65535" 2 663 "sint8" `257 
v L "??65535" 2 663 "sint8" `258 
f B "_mul" 2 663 "sint16(sint8 ,sint8 )" `256 
f N "_mul" 2 664 ""
v L "??65535" 2 664 "int16" `260 
v L "??65535" 2 664 "int16" `261 
f B "_mul" 2 664 "int32(int16 ,int16 )" `259 
f N "_mul" 2 665 ""
v L "??65535" 2 665 "sint16" `263 
v L "??65535" 2 665 "sint16" `264 
f B "_mul" 2 665 "sint32(sint16 ,sint16 )" `262  "Memory Manipulation Prototypes:"
f N "read_bank" 2 668 ""
v L "bank" 2 668 "int8" `266 
v L "offset" 2 668 "int8" `267 
f B "read_bank" 2 668 "int8(int8 bank,int8 offset)" `265 
f N "write_bank" 2 669 ""
v L "bank" 2 669 "int8" `269 
v L "offset" 2 669 "int8" `270 
v L "value" 2 669 "int8" `271 
f B "write_bank" 2 669 "void(int8 bank,int8 offset,int8 value)" `268 
f N "strcpy" 2 670 ""
v L "dest" 2 670 "*int8" `273 
v L "src" 2 670 "*int8" `274 
f B "strcpy" 2 670 "void(*int8 dest,*int8 src)" `272 
f N "memset" 2 671 ""
v L "destination" 2 671 "*int8" `276 
v L "value" 2 671 "int8" `277 
v L "num" 2 671 "int16" `278 
f B "memset" 2 671 "void(*int8 destination,int8 value,int16 num)" `275 
f N "memcpy" 2 672 ""
v L "destination" 2 672 "*int8" `280 
v L "source" 2 672 "*int8" `281 
v L "num" 2 672 "int16" `282 
f B "memcpy" 2 672 "void(*int8 destination,*int8 source,int16 num)" `279  "String Prototypes:"
f N "toupper" 2 675 ""
v L "cvalue" 2 675 "int8" `284 
f B "toupper" 2 675 "int8(int8 cvalue)" `283 
f N "tolower" 2 676 ""
v L "cvalue" 2 676 "int8" `286 
f B "tolower" 2 676 "int8(int8 cvalue)" `285 
f N "sprintf" 2 677 ""
v L "string" 2 677 "*int8" `288 
v L "cstring" 2 677 "*int8" `289 
f B "sprintf" 2 677 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `287  "Data Manipulators Prototypes:"
f N "shift_left" 2 680 ""
v L "address" 2 680 "*int8" `292 
v L "bytes" 2 680 "int8" `293 
v L "value" 2 680 "int8" `294 
f B "shift_left" 2 680 "int8(*int8 address,int8 bytes,int8 value)" `291 
f N "shift_right" 2 681 ""
v L "address" 2 681 "*int8" `296 
v L "bytes" 2 681 "int8" `297 
v L "value" 2 681 "int8" `298 
f B "shift_right" 2 681 "int8(*int8 address,int8 bytes,int8 value)" `295 
f N "rotate_left" 2 682 ""
v L "address" 2 682 "*int8" `300 
v L "bytes" 2 682 "int8" `301 
f B "rotate_left" 2 682 "void(*int8 address,int8 bytes)" `299 
f N "rotate_right" 2 683 ""
v L "address" 2 683 "*int8" `303 
v L "bytes" 2 683 "int8" `304 
f B "rotate_right" 2 683 "void(*int8 address,int8 bytes)" `302 
f N "swap" 2 684 ""
v L "value" 2 684 "int8" `306 
f B "swap" 2 684 "void(int8 value)" `305 
f N "make8" 2 685 ""
v L "var" 2 685 "int16" `308 
v L "offset" 2 685 "int8" `309 
f B "make8" 2 685 "int8(int16 var,int8 offset)" `307 
f N "make8" 2 686 ""
v L "var" 2 686 "int32" `311 
v L "offset" 2 686 "int8" `312 
f B "make8" 2 686 "int8(int32 var,int8 offset)" `310 
f N "make16" 2 687 ""
v L "varhigh" 2 687 "int8" `314 
v L "varlow" 2 687 "int8" `315 
f B "make16" 2 687 "int16(int8 varhigh,int8 varlow)" `313 
f N "make32" 2 688 ""
v L "var1" 2 688 "int16" `317 
f B "make32" 2 688 "int32(int16 var1)" `316 
f N "make32" 2 689 ""
v L "var1" 2 689 "int16" `319 
v L "var2" 2 689 "int16" `320 
f B "make32" 2 689 "int32(int16 var1,int16 var2)" `318 
f N "make32" 2 690 ""
v L "var1" 2 690 "int16" `322 
v L "var2" 2 690 "int8" `323 
f B "make32" 2 690 "int32(int16 var1,int8 var2)" `321 
f N "make32" 2 691 ""
v L "var1" 2 691 "int16" `325 
v L "var2" 2 691 "int8" `326 
v L "var3" 2 691 "int8" `327 
f B "make32" 2 691 "int32(int16 var1,int8 var2,int8 var3)" `324 
f N "make32" 2 692 ""
v L "var1" 2 692 "int8" `329 
f B "make32" 2 692 "int32(int8 var1)" `328 
f N "make32" 2 693 ""
v L "var1" 2 693 "int8" `331 
v L "var2" 2 693 "int8" `332 
f B "make32" 2 693 "int32(int8 var1,int8 var2)" `330 
f N "make32" 2 694 ""
v L "var1" 2 694 "int8" `334 
v L "var2" 2 694 "int8" `335 
v L "var3" 2 694 "int8" `336 
f B "make32" 2 694 "int32(int8 var1,int8 var2,int8 var3)" `333 
f N "make32" 2 695 ""
v L "var1" 2 695 "int8" `338 
v L "var2" 2 695 "int8" `339 
v L "var3" 2 695 "int8" `340 
v L "var4" 2 695 "int8" `341 
f B "make32" 2 695 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `337 
f N "make32" 2 696 ""
v L "var1" 2 696 "int8" `343 
v L "var2" 2 696 "int16" `344 
f B "make32" 2 696 "int32(int8 var1,int16 var2)" `342 
f N "make32" 2 697 ""
v L "var1" 2 697 "int8" `346 
v L "var2" 2 697 "int16" `347 
v L "var3" 2 697 "int8" `348 
f B "make32" 2 697 "int32(int8 var1,int16 var2,int8 var3)" `345 
f N "make32" 2 698 ""
v L "var1" 2 698 "int8" `350 
v L "var2" 2 698 "int8" `351 
v L "var3" 2 698 "int16" `352 
f B "make32" 2 698 "int32(int8 var1,int8 var2,int16 var3)" `349 
f N "bit_set" 2 699 ""
v L "var" 2 699 "int8" `354 
v L "bit" 2 699 "int8" `355 
f B "bit_set" 2 699 "void(int8 var,int8 bit)" `353 
f N "bit_set" 2 700 ""
v L "var" 2 700 "int16" `357 
v L "bit" 2 700 "int8" `358 
f B "bit_set" 2 700 "void(int16 var,int8 bit)" `356 
f N "bit_set" 2 701 ""
v L "var" 2 701 "int32" `360 
v L "bit" 2 701 "int8" `361 
f B "bit_set" 2 701 "void(int32 var,int8 bit)" `359 
f N "bit_clear" 2 702 ""
v L "var" 2 702 "int8" `363 
v L "bit" 2 702 "int8" `364 
f B "bit_clear" 2 702 "void(int8 var,int8 bit)" `362 
f N "bit_clear" 2 703 ""
v L "var" 2 703 "int16" `366 
v L "bit" 2 703 "int8" `367 
f B "bit_clear" 2 703 "void(int16 var,int8 bit)" `365 
f N "bit_clear" 2 704 ""
v L "var" 2 704 "int32" `369 
v L "bit" 2 704 "int8" `370 
f B "bit_clear" 2 704 "void(int32 var,int8 bit)" `368 
f N "bit_test" 2 705 ""
v L "var" 2 705 "int8" `372 
v L "bit" 2 705 "int8" `373 
f B "bit_test" 2 705 "int8(int8 var,int8 bit)" `371 
f N "bit_test" 2 706 ""
v L "var" 2 706 "int16" `375 
v L "bit" 2 706 "int8" `376 
f B "bit_test" 2 706 "int8(int16 var,int8 bit)" `374 
f N "bit_test" 2 707 ""
v L "var" 2 707 "int32" `378 
v L "bit" 2 707 "int8" `379 
f B "bit_test" 2 707 "int8(int32 var,int8 bit)" `377  "#use delay() Prototypes:"
f N "delay_cycles" 2 710 ""
v L "count" 2 710 "int8" `381 
f B "delay_cycles" 2 710 "void(int8 count)" `380 
f N "delay_ms" 2 711 ""
v L "time" 2 711 "int16" `383 
f B "delay_ms" 2 711 "void(int16 time)" `382 
f N "delay_us" 2 712 ""
v L "time" 2 712 "int16" `385 
f B "delay_us" 2 712 "void(int16 time)" `384  "#use rs232() Prototypes:"
f N "putchar" 2 715 ""
v L "cdata" 2 715 "int8" `387 
f B "putchar" 2 715 "void(int8 cdata)" `386 
f N "putchar" 2 716 ""
v L "cdata" 2 716 "int8" `389 
v L "stream" 2 716 "int8" `390 
f B "putchar" 2 716 "void(int8 cdata,int8 stream)" `388 
f N "puts" 2 717 ""
v L "string" 2 717 "*int8" `392 
f B "puts" 2 717 "void(*int8 string)" `391 
f N "puts" 2 718 ""
v L "string" 2 718 "*int8" `394 
v L "stream" 2 718 "int8" `395 
f B "puts" 2 718 "void(*int8 string,int8 stream)" `393 
f N "getch" 2 719 ""
f B "getch" 2 719 "int8()" `396 
f N "getch" 2 720 ""
v L "stream" 2 720 "int8" `398 
f B "getch" 2 720 "int8(int8 stream)" `397 
f N "gets" 2 721 ""
v L "string" 2 721 "*int8" `400 
f B "gets" 2 721 "void(*int8 string)" `399 
f N "gets" 2 722 ""
v L "string" 2 722 "*int8" `402 
v L "stream" 2 722 "int8" `403 
f B "gets" 2 722 "void(*int8 string,int8 stream)" `401 
f N "kbhit" 2 723 ""
f B "kbhit" 2 723 "int8()" `404 
f N "kbhit" 2 724 ""
v L "stream" 2 724 "int8" `406 
f B "kbhit" 2 724 "int8(int8 stream)" `405 
f N "printf" 2 725 ""
v L "string" 2 725 "*int8" `408 
f B "printf" 2 725 "void(*int8 string,*int8 _VA_LIST)" `407 
f N "fprintf" 2 726 ""
v L "stream" 2 726 "int8" `411 
v L "string" 2 726 "*int8" `412 
f B "fprintf" 2 726 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `410 
f N "putc_send" 2 727 ""
f B "putc_send" 2 727 "void()" `414 
f N "fputc_send" 2 728 ""
v L "stream" 2 728 "int8" `416 
f B "fputc_send" 2 728 "void(int8 stream)" `415 
f N "rcv_buffer_full" 2 729 ""
f B "rcv_buffer_full" 2 729 "int8()" `417 
f N "rcv_buffer_full" 2 730 ""
v L "stream" 2 730 "int8" `419 
f B "rcv_buffer_full" 2 730 "int8(int8 stream)" `418 
f N "rcv_buffer_bytes" 2 731 ""
f B "rcv_buffer_bytes" 2 731 "int16()" `420 
f N "rcv_buffer_bytes" 2 732 ""
v L "stream" 2 732 "int8" `422 
f B "rcv_buffer_bytes" 2 732 "int16(int8 stream)" `421 
f N "tx_buffer_full" 2 733 ""
f B "tx_buffer_full" 2 733 "int8()" `423 
f N "tx_buffer_full" 2 734 ""
v L "stream" 2 734 "int8" `425 
f B "tx_buffer_full" 2 734 "int8(int8 stream)" `424 
f N "tx_buffer_bytes" 2 735 ""
f B "tx_buffer_bytes" 2 735 "int16()" `426 
f N "tx_buffer_bytes" 2 736 ""
v L "stream" 2 736 "int8" `428 
f B "tx_buffer_bytes" 2 736 "int16(int8 stream)" `427  "#use i2c() Prototypes:"
f N "i2c_read" 2 739 ""
f B "i2c_read" 2 739 "int8()" `429 
f N "i2c_read" 2 740 ""
v L "ack" 2 740 "int8" `431 
f B "i2c_read" 2 740 "int8(int8 ack)" `430 
f N "i2c_read" 2 741 ""
v L "stream" 2 741 "int8" `433 
v L "ack" 2 741 "int8" `434 
f B "i2c_read" 2 741 "int8(int8 stream,int8 ack)" `432 
f N "i2c_write" 2 742 ""
v L "data" 2 742 "int8" `436 
f B "i2c_write" 2 742 "int8(int8 data)" `435 
f N "i2c_write" 2 743 ""
v L "stream" 2 743 "int8" `438 
v L "data" 2 743 "int8" `439 
f B "i2c_write" 2 743 "int8(int8 stream,int8 data)" `437 
f N "i2c_start" 2 744 ""
f B "i2c_start" 2 744 "void()" `440 
f N "i2c_start" 2 745 ""
v L "stream" 2 745 "int8" `442 
f B "i2c_start" 2 745 "void(int8 stream)" `441 
f N "i2c_start" 2 746 ""
v L "stream" 2 746 "int8" `444 
v L "restart" 2 746 "int8" `445 
f B "i2c_start" 2 746 "void(int8 stream,int8 restart)" `443 
f N "i2c_stop" 2 747 ""
f B "i2c_stop" 2 747 "void()" `446 
f N "i2c_stop" 2 748 ""
v L "stream" 2 748 "int8" `448 
f B "i2c_stop" 2 748 "void(int8 stream)" `447 
f N "i2c_isr_state" 2 749 ""
f B "i2c_isr_state" 2 749 "int8()" `449 
f N "i2c_slaveaddr" 2 750 ""
v L "addr" 2 750 "int8" `451 
f B "i2c_slaveaddr" 2 750 "void(int8 addr)" `450 
f N "i2c_slaveaddr" 2 751 ""
v L "stream" 2 751 "int8" `453 
v L "addr" 2 751 "int8" `454 
f B "i2c_slaveaddr" 2 751 "void(int8 stream,int8 addr)" `452 
f N "i2c_poll" 2 752 ""
f B "i2c_poll" 2 752 "int8()" `455 
f N "i2c_poll" 2 753 ""
v L "stream" 2 753 "int8" `457 
f B "i2c_poll" 2 753 "int8(int8 stream)" `456 
f N "i2c_init" 2 754 ""
v L "baud" 2 754 "int32" `459 
f B "i2c_init" 2 754 "void(int32 baud)" `458 
f N "i2c_init" 2 755 ""
v L "stream" 2 755 "int8" `461 
v L "baud" 2 755 "int32" `462 
f B "i2c_init" 2 755 "void(int8 stream,int32 baud)" `460  "#use spi() Prototypes:"
f N "spi_xfer" 2 758 ""
f B "spi_xfer" 2 758 "int8()" `463 
f N "spi_xfer" 2 759 ""
f G "spi_xfer" 2 759 "int16(int8 data)" `464 
f N "spi_xfer" 2 760 ""
f G "spi_xfer" 2 760 "int32(int8 data)" `464 
f N "spi_xfer" 2 761 ""
v L "data" 2 761 "int8" `465 
f B "spi_xfer" 2 761 "int8(int8 data)" `464 
f N "spi_xfer" 2 762 ""
v L "data" 2 762 "int16" `467 
f B "spi_xfer" 2 762 "int16(int16 data)" `466 
f N "spi_xfer" 2 763 ""
v L "data" 2 763 "int32" `469 
f B "spi_xfer" 2 763 "int32(int32 data)" `468 
f N "spi_xfer" 2 764 ""
v L "stream" 2 764 "int8" `471 
v L "data" 2 764 "int8" `472 
f B "spi_xfer" 2 764 "int8(int8 stream,int8 data)" `470 
f N "spi_xfer" 2 765 ""
v L "stream" 2 765 "int8" `474 
v L "data" 2 765 "int16" `475 
f B "spi_xfer" 2 765 "int16(int8 stream,int16 data)" `473 
f N "spi_xfer" 2 766 ""
v L "stream" 2 766 "int8" `477 
v L "data" 2 766 "int32" `478 
f B "spi_xfer" 2 766 "int32(int8 stream,int32 data)" `476 
f N "spi_xfer" 2 767 ""
v L "stream" 2 767 "int8" `480 
v L "data" 2 767 "int8" `481 
v L "bits" 2 767 "int8" `482 
f B "spi_xfer" 2 767 "int8(int8 stream,int8 data,int8 bits)" `479 
f N "spi_xfer" 2 768 ""
v L "stream" 2 768 "int8" `484 
v L "data" 2 768 "int16" `485 
v L "bits" 2 768 "int8" `486 
f B "spi_xfer" 2 768 "int16(int8 stream,int16 data,int8 bits)" `483 
f N "spi_xfer" 2 769 ""
v L "stream" 2 769 "int8" `488 
v L "data" 2 769 "int32" `489 
v L "bits" 2 769 "int8" `490 
f B "spi_xfer" 2 769 "int32(int8 stream,int32 data,int8 bits)" `487 
f N "spi_init" 2 770 ""
v L "baud" 2 770 "int32" `492 
f B "spi_init" 2 770 "void(int32 baud)" `491 
f N "spi_init" 2 771 ""
v L "stream" 2 771 "int8" `494 
v L "baud" 2 771 "int32" `495 
f B "spi_init" 2 771 "void(int8 stream,int32 baud)" `493 
f N "spi_speed" 2 772 ""
v L "baud" 2 772 "int32" `497 
f B "spi_speed" 2 772 "void(int32 baud)" `496 
f N "spi_speed" 2 773 ""
v L "stream" 2 773 "int8" `499 
v L "baud" 2 773 "int32" `500 
f B "spi_speed" 2 773 "void(int8 stream,int32 baud)" `498 
f N "spi_speed" 2 774 ""
v L "stream" 2 774 "int8" `502 
v L "baud" 2 774 "int32" `503 
v L "clock" 2 774 "int32" `504 
f B "spi_speed" 2 774 "void(int8 stream,int32 baud,int32 clock)" `501 
f N "spi_prewrite" 2 775 ""
v L "data" 2 775 "int8" `506 
f B "spi_prewrite" 2 775 "void(int8 data)" `505 
f N "spi_prewrite" 2 776 ""
v L "data" 2 776 "int16" `508 
f B "spi_prewrite" 2 776 "void(int16 data)" `507 
f N "spi_prewrite" 2 777 ""
v L "data" 2 777 "int32" `510 
f B "spi_prewrite" 2 777 "void(int32 data)" `509 
f N "spi_prewrite" 2 778 ""
v L "??65535" 2 778 "int8" `512 
v L "data" 2 778 "int8" `513 
f B "spi_prewrite" 2 778 "void(int8 ,int8 data)" `511 
f N "spi_prewrite" 2 779 ""
v L "??65535" 2 779 "int8" `515 
v L "data" 2 779 "int16" `516 
f B "spi_prewrite" 2 779 "void(int8 ,int16 data)" `514 
f N "spi_prewrite" 2 780 ""
v L "??65535" 2 780 "int8" `518 
v L "data" 2 780 "int32" `519 
f B "spi_prewrite" 2 780 "void(int8 ,int32 data)" `517 
f N "spi_xfer_in" 2 781 ""
f B "spi_xfer_in" 2 781 "int8()" `520 
f N "spi_xfer_in" 2 782 ""
f G "spi_xfer_in" 2 782 "int16(int8 bits)" `521 
f N "spi_xfer_in" 2 783 ""
f G "spi_xfer_in" 2 783 "int32(int8 bits)" `521 
f N "spi_xfer_in" 2 784 ""
v L "bits" 2 784 "int8" `522 
f B "spi_xfer_in" 2 784 "int8(int8 bits)" `521 
f N "spi_xfer_in" 2 785 ""
v L "bits" 2 785 "int8" `524 
f G "spi_xfer_in" 2 785 "int16(int8 bits,int8 bits)" `523 
f N "spi_xfer_in" 2 786 ""
v L "bits" 2 786 "int8" `524 
f G "spi_xfer_in" 2 786 "int32(int8 bits,int8 bits)" `523 
f N "spi_xfer_in" 2 787 ""
v L "stream" 2 787 "int8" `524 
v L "bits" 2 787 "int8" `525 
f B "spi_xfer_in" 2 787 "int8(int8 stream,int8 bits)" `523 
f N "spi_xfer_in" 2 788 ""
v L "stream" 2 788 "int8" `524 
v L "bits" 2 788 "int8" `528 
f G "spi_xfer_in" 2 788 "int16(int8 stream,int8 bits,int8 task)" `526 
f N "spi_xfer_in" 2 789 ""
v L "stream" 2 789 "int8" `524 
v L "bits" 2 789 "int8" `528 
f G "spi_xfer_in" 2 789 "int32(int8 stream,int8 bits,int8 task)" `526  "#use rtos() Prototypes:"
f N "rtos_run" 2 792 ""
f B "rtos_run" 2 792 "void(int8 stream,int8 bits,int8 task)" `526 
f N "rtos_yield" 2 793 ""
f B "rtos_yield" 2 793 "void(int8 bits,int8 task)" `527 
f N "rtos_enable" 2 794 ""
v L "task" 2 794 "int8" `529 
f B "rtos_enable" 2 794 "void(int8 task)" `528 
f N "rtos_disable" 2 795 ""
v L "task" 2 795 "int8" `531 
f B "rtos_disable" 2 795 "void(int8 task)" `530 
f N "rtos_terminate" 2 796 ""
f B "rtos_terminate" 2 796 "void()" `532 
f N "rtos_await" 2 797 ""
v L "flag" 2 797 "int8" `534 
f B "rtos_await" 2 797 "void(int8 flag)" `533 
f N "rtos_wait" 2 798 ""
v L "sem" 2 798 "int8" `536 
f B "rtos_wait" 2 798 "void(int8 sem)" `535 
f N "rtos_signal" 2 799 ""
v L "sem" 2 799 "int8" `538 
f B "rtos_signal" 2 799 "void(int8 sem)" `537 
f N "rtos_msg_send" 2 800 ""
v L "task" 2 800 "int8" `540 
v L "msg" 2 800 "int8" `541 
f B "rtos_msg_send" 2 800 "void(int8 task,int8 msg)" `539 
f N "rtos_msg_read" 2 801 ""
f B "rtos_msg_read" 2 801 "int8()" `542 
f N "rtos_msg_poll" 2 802 ""
f B "rtos_msg_poll" 2 802 "int8()" `543 
f N "rtos_overrun" 2 803 ""
v L "task" 2 803 "int8" `545 
f B "rtos_overrun" 2 803 "int8(int8 task)" `544 
f N "rtos_stats" 2 804 ""
v L "task" 2 804 "int8" `547 
v L "stat" 2 804 "*int8" `548 
f B "rtos_stats" 2 804 "void(int8 task,*int8 stat)" `546  "#use timer() Prototypes:"
f N "get_ticks" 2 807 ""
f B "get_ticks" 2 807 "int8()" `549 
f N "get_ticks" 2 808 ""
f G "get_ticks" 2 808 "int16(int8 stream)" `550 
f N "get_ticks" 2 809 ""
f G "get_ticks" 2 809 "int32(int8 stream)" `550 
f N "get_ticks" 2 810 ""
v L "stream" 2 810 "int8" `551 
f B "get_ticks" 2 810 "int8(int8 stream)" `550 
f N "get_ticks" 2 811 ""
v L "stream" 2 811 "int8" `553 
f G "get_ticks" 2 811 "int16(int8 stream)" `552 
f N "get_ticks" 2 812 ""
v L "stream" 2 812 "int8" `553 
f G "get_ticks" 2 812 "int32(int8 stream)" `552 
f N "set_ticks" 2 813 ""
v L "value" 2 813 "int8" `553 
f B "set_ticks" 2 813 "void(int8 value)" `552 
f N "set_ticks" 2 814 ""
v L "value" 2 814 "int16" `555 
f B "set_ticks" 2 814 "void(int16 value)" `554 
f N "set_ticks" 2 815 ""
v L "value" 2 815 "int32" `557 
f B "set_ticks" 2 815 "void(int32 value)" `556 
f N "set_ticks" 2 816 ""
v L "stream" 2 816 "int8" `559 
v L "value" 2 816 "int8" `560 
f B "set_ticks" 2 816 "void(int8 stream,int8 value)" `558 
f N "set_ticks" 2 817 ""
v L "stream" 2 817 "int8" `562 
v L "value" 2 817 "int16" `563 
f B "set_ticks" 2 817 "void(int8 stream,int16 value)" `561 
f N "set_ticks" 2 818 ""
v L "stream" 2 818 "int8" `565 
v L "value" 2 818 "int32" `566 
f B "set_ticks" 2 818 "void(int8 stream,int32 value)" `564  "#use pwm() Prototypes:"
f N "pwm_on" 2 821 ""
f B "pwm_on" 2 821 "void()" `567 
f N "pwm_on" 2 822 ""
v L "stream" 2 822 "int8" `569 
f B "pwm_on" 2 822 "void(int8 stream)" `568 
f N "pwm_off" 2 823 ""
f B "pwm_off" 2 823 "void()" `570 
f N "pwm_off" 2 824 ""
v L "stream" 2 824 "int8" `572 
f B "pwm_off" 2 824 "void(int8 stream)" `571 
f N "pwm_set_duty" 2 825 ""
v L "duty" 2 825 "int16" `574 
f B "pwm_set_duty" 2 825 "void(int16 duty)" `573 
f N "pwm_set_duty" 2 826 ""
v L "stream" 2 826 "int8" `576 
v L "duty" 2 826 "int16" `577 
f B "pwm_set_duty" 2 826 "void(int8 stream,int16 duty)" `575 
f N "pwm_set_duty_percent" 2 827 ""
v L "percent" 2 827 "int16" `579 
f B "pwm_set_duty_percent" 2 827 "void(int16 percent)" `578 
f N "pwm_set_duty_percent" 2 828 ""
v L "stream" 2 828 "int8" `581 
v L "percent" 2 828 "int16" `582 
f B "pwm_set_duty_percent" 2 828 "void(int8 stream,int16 percent)" `580 
f N "pwm_set_frequency" 2 829 ""
v L "frequency" 2 829 "int32" `584 
f B "pwm_set_frequency" 2 829 "void(int32 frequency)" `583 
f N "pwm_set_frequency" 2 830 ""
v L "stream" 2 830 "int8" `586 
v L "frequency" 2 830 "int32" `587 
f B "pwm_set_frequency" 2 830 "void(int8 stream,int32 frequency)" `585  "#use capture() Prototypes:"
f N "get_capture_time" 2 833 ""
f B "get_capture_time" 2 833 "int16()" `588 
f N "get_capture_time" 2 834 ""
v L "stream" 2 834 "int8" `590 
f B "get_capture_time" 2 834 "int16(int8 stream)" `589 
f N "get_capture_event" 2 835 ""
f B "get_capture_event" 2 835 "int8()" `591 
f N "get_capture_event" 2 836 ""
v L "stream" 2 836 "int8" `593 
f B "get_capture_event" 2 836 "int8(int8 stream)" `592  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 849 ""
v L "address" 2 849 "int16" `595 
f B "goto_address" 2 849 "void(int16 address)" `594 
f N "label_address" 2 850 ""
v L "label" 2 850 "int16" `597 
f B "label_address" 2 850 "int16(int16 label)" `596  "Program Memory Prototypes:"
f N "read_program_memory" 2 853 ""
v L "address" 2 853 "int16" `599 
v L "dataptr" 2 853 "*int8" `600 
v L "count" 2 853 "int16" `601 
f B "read_program_memory" 2 853 "void(int16 address,*int8 dataptr,int16 count)" `598 
f N "read_program_eeprom" 2 854 ""
v L "address" 2 854 "int16" `603 
f B "read_program_eeprom" 2 854 "int16(int16 address)" `602 
f N "read_configuration_memory" 2 855 ""
v L "dataptr" 2 855 "*int8" `605 
v L "count" 2 855 "int8" `606 
f B "read_configuration_memory" 2 855 "void(*int8 dataptr,int8 count)" `604 
f N "read_configuration_memory" 2 856 ""
v L "offset" 2 856 "int8" `608 
v L "dataptr" 2 856 "*int8" `609 
v L "count" 2 856 "int8" `610 
f B "read_configuration_memory" 2 856 "void(int8 offset,*int8 dataptr,int8 count)" `607 
f N "read_configuration_memory" 2 857 ""
v L "dataptr" 2 857 "*int8" `605 
v L "count" 2 857 "int8" `613 
f G "read_configuration_memory" 2 857 "void(*int8 dataptr,int8 count,int16 count)" `611 
f N "read_configuration_memory" 2 858 ""
v L "offset" 2 858 "int8" `608 
v L "dataptr" 2 858 "*int8" `609 
v L "count" 2 858 "int8" `614 
f G "read_configuration_memory" 2 858 "void(int8 offset,*int8 dataptr,int8 count)" `611 
f N "write_program_memory" 2 859 ""
v L "address" 2 859 "int16" `612 
v L "dataptr" 2 859 "*int8" `613 
v L "count" 2 859 "int16" `614 
f B "write_program_memory" 2 859 "void(int16 address,*int8 dataptr,int16 count)" `611 
f N "write_program_eeprom" 2 860 ""
v L "address" 2 860 "int16" `616 
v L "data" 2 860 "int16" `617 
f B "write_program_eeprom" 2 860 "void(int16 address,int16 data)" `615 
f N "write_configuration_memory" 2 861 ""
v L "dataptr" 2 861 "*int8" `619 
v L "count" 2 861 "int8" `620 
f B "write_configuration_memory" 2 861 "void(*int8 dataptr,int8 count)" `618 
f N "write_configuration_memory" 2 862 ""
v L "offset" 2 862 "int8" `622 
v L "dataptr" 2 862 "*int8" `623 
v L "count" 2 862 "int8" `624 
f B "write_configuration_memory" 2 862 "void(int8 offset,*int8 dataptr,int8 count)" `621 
f N "write_configuration_memory" 2 863 ""
v L "dataptr" 2 863 "*int8" `619 
v L "count" 2 863 "int8" `627 
f G "write_configuration_memory" 2 863 "void(*int8 dataptr,int8 count,int16 address,int8 value)" `625 
f N "write_configuration_memory" 2 864 ""
v L "offset" 2 864 "int8" `622 
v L "dataptr" 2 864 "*int8" `623 
v L "count" 2 864 "int8" `628 
f G "write_configuration_memory" 2 864 "void(int8 offset,*int8 dataptr,int8 count,int8 value)" `625  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 869 "unsigned int16"
f N "read_eeprom" 2 874 ""
v L "address" 2 874 "int16" `626 
f B "read_eeprom" 2 874 "int8(int16 address,*int8 dataptr,int8 count,int8 value)" `625 
f N "write_eeprom" 2 875 ""
v L "address" 2 875 "int16" `628 
v L "value" 2 875 "int8" `629 
f B "write_eeprom" 2 875 "void(int16 address,int8 value)" `627  "#use touchpad() Prototypes:"
f N "touchpad_state" 2 878 ""
v L "state" 2 878 "int8" `631 
f B "touchpad_state" 2 878 "void(int8 state)" `630 
f N "touchpad_getc" 2 879 ""
f B "touchpad_getc" 2 879 "int8()" `632 
f N "touchpad_hit" 2 880 ""
f B "touchpad_hit" 2 880 "int8()" `633  "INT"
c L "touchpad_hit" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 886 ""
v L "interrupt" 2 886 "int32" `635 
f B "enable_interrupts" 2 886 "void(int32 interrupt)" `634 
f N "disable_interrupts" 2 887 ""
v L "interrupt" 2 887 "int32" `637 
f B "disable_interrupts" 2 887 "void(int32 interrupt)" `636 
f N "clear_interrupt" 2 888 ""
v L "interrupt" 2 888 "int32" `639 
f B "clear_interrupt" 2 888 "void(int32 interrupt)" `638 
f N "interrupt_active" 2 889 ""
v L "interrupt" 2 889 "int32" `641 
f B "interrupt_active" 2 889 "int8(int32 interrupt)" `640 
f N "interrupt_enabled" 2 890 ""
v L "interrupt" 2 890 "int32" `643 
f B "interrupt_enabled" 2 890 "int8(int32 interrupt)" `642 
f N "ext_int_edge" 2 891 ""
v L "source" 2 891 "int8" `645 
v L "edge" 2 891 "int8" `646 
f B "ext_int_edge" 2 891 "void(int8 source,int8 edge)" `644 
f N "jump_to_isr" 2 892 ""
v L "address" 2 892 "int16" `648 
f B "jump_to_isr" 2 892 "void(int16 address)" `647  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 894 "0x40"
d G "H_TO_L" 2 895 "0"
d G "GLOBAL" 2 897 "0x0BC0"
d G "PERIPH" 2 898 "0x0B40"
d G "INT_EXT_L2H" 2 899 "0x50000B10"
d G "INT_EXT_H2L" 2 900 "0x60000B10"
d G "INT_EXT" 2 901 "0x300B10"
d G "INT_TIMER0" 2 902 "0x300B20"
d G "INT_TIMER1" 2 903 "0x309101"
d G "INT_TIMER2" 2 904 "0x309102"
d G "INT_CCP1" 2 905 "0x309104"
d G "INT_SSP" 2 906 "0x309108"
d G "INT_TBE" 2 907 "0x309110"
d G "INT_RDA" 2 908 "0x309120"
d G "INT_AD" 2 909 "0x309140"
d G "INT_TIMER1_GATE" 2 910 "0x309180"
d G "INT_BUSCOL" 2 911 "0x309208"
d G "INT_EEPROM" 2 912 "0x309210"
d G "INT_COMP" 2 913 "0x309220"
d G "INT_COMP2" 2 914 "0x309240"
d G "INT_OSC_FAIL" 2 915 "0x309280"
d G "INT_TIMER4" 2 916 "0x309302"
d G "INT_TIMER6" 2 917 "0x309308"
d G "INT_CCP3" 2 918 "0x309310"
d G "INT_CCP4" 2 919 "0x309320"
d G "INT_CCP2" 2 920 "0x309201"
d G "INT_IOC" 2 921 "0x3FFF0B08"
d G "INT_IOC_A0" 2 922 "0x30010B08"
d G "INT_IOC_A0_L2H" 2 923 "0x10010B08"
d G "INT_IOC_A0_H2L" 2 924 "0x20010B08"
d G "INT_IOC_A1" 2 925 "0x30020B08"
d G "INT_IOC_A1_L2H" 2 926 "0x10020B08"
d G "INT_IOC_A1_H2L" 2 927 "0x20020B08"
d G "INT_IOC_A2" 2 928 "0x30040B08"
d G "INT_IOC_A2_L2H" 2 929 "0x10040B08"
d G "INT_IOC_A2_H2L" 2 930 "0x20040B08"
d G "INT_IOC_A3" 2 931 "0x30080B08"
d G "INT_IOC_A3_L2H" 2 932 "0x10080B08"
d G "INT_IOC_A3_H2L" 2 933 "0x20080B08"
d G "INT_IOC_A4" 2 934 "0x30100B08"
d G "INT_IOC_A4_L2H" 2 935 "0x10100B08"
d G "INT_IOC_A4_H2L" 2 936 "0x20100B08"
d G "INT_IOC_A5" 2 937 "0x30200B08"
d G "INT_IOC_A5_L2H" 2 938 "0x10200B08"
d G "INT_IOC_A5_H2L" 2 939 "0x20200B08"
d G "INT_RA" 2 946 "0x30FF0B08"
d G "INT_RA0" 2 947 "0x30010B08"
d G "INT_RA0_L2H" 2 948 "0x10010B08"
d G "INT_RA0_H2L" 2 949 "0x20010B08"
d G "INT_RA1" 2 950 "0x30020B08"
d G "INT_RA1_L2H" 2 951 "0x10020B08"
d G "INT_RA1_H2L" 2 952 "0x20020B08"
d G "INT_RA2" 2 953 "0x30040B08"
d G "INT_RA2_L2H" 2 954 "0x10040B08"
d G "INT_RA2_H2L" 2 955 "0x20040B08"
d G "INT_RA3" 2 956 "0x30080B08"
d G "INT_RA3_L2H" 2 957 "0x10080B08"
d G "INT_RA3_H2L" 2 958 "0x20080B08"
d G "INT_RA4" 2 959 "0x30100B08"
d G "INT_RA4_L2H" 2 960 "0x10100B08"
d G "INT_RA4_H2L" 2 961 "0x20100B08"
d G "INT_RA5" 2 962 "0x30200B08"
d G "INT_RA5_L2H" 2 963 "0x10200B08"
d G "INT_RA5_H2L" 2 964 "0x20200B08"
D G "LED" 1 5 "PIN_C2"
D G "DELAY" 1 6 "1000"
D G "MODBUS_BUS" 0 4 "SERIAL"
D G "MODBUS_TYPE" 0 5 "MODBUS_TYPE_MASTER"
D G "MODBUS_SERIAL_TYPE" 0 6 "MODBUS_RTU"
D G "MODBUS_SERIAL_INT_SOURCE" 0 7 "MODBUS_INT_RDA"
D G "MODBUS_SERIAL_ENABLE_PIN" 0 9 "PIN_C3" "Controls DE pin.  RX low, TX high."
D G "MODBUS_SERIAL_BAUD" 0 10 "19200"
D G "MODBUS_REMOTE_ADDRESS" 0 11 "247"
D G "MODBUS_SERIAL_TIMEOUT" 0 12 "500000" "us"
D G "MODBUS_SERIAL_RX_BUFFER_SIZE" 0 13 "250"
C L "jump_to_isr" 3 2 63 "FUNCTION"
D G "MODBUS_H" 4 66 ""
D G "MODBUS_PROTOCOL_SERIAL" 4 69 "0"
D G "MODBUS_PROTOCOL_TCPIP" 4 70 "100"
D G "MODBUS_TYPE_MASTER" 4 71 "99999"
D G "MODBUS_TYPE_SLAVE" 4 72 "88888"
D G "MODBUS_TYPE_CLIENT" 4 73 "20"
D G "MODBUS_TYPE_SERVER" 4 74 "21"
D G "MODBUS_INT_RDA" 4 75 "77777"
D G "MODBUS_INT_RDA2" 4 76 "66666"
D G "MODBUS_INT_RDA3" 4 77 "44444"
D G "MODBUS_INT_RDA4" 4 78 "33333"
D G "MODBUS_INT_EXT" 4 79 "55555"
D G "MODBUS_RTU" 4 80 "1"
D G "MODBUS_ASCII" 4 81 "2"
D G "MODBUS_TIMER_NOISR" 4 82 "13"
D G "MODBUS_TIMER_ISR" 4 83 "12"
D G "MODBUS_TIMER_T1" 4 84 "14"
D G "MODBUS_TIMER_T2" 4 85 "15"
D G "MODBUS_PROTOCOL" 4 88 "MODBUS_PROTOCOL_SERIAL"
D G "MODBUS_SERIAL_RX_PIN" 4 109 "PIN_C7" "Data receive pin"
D G "MODBUS_SERIAL_TX_PIN" 4 113 "PIN_C6" "Data transmit pin"
D G "MODBUS_SERIAL_RX_ENABLE" 4 121 "0" "Controls RE pin.  Should keep low."
D G "MODBUS_PARITY" 4 125 ""EVEN""
D G "MODBUS_TIMER_UPDATE" 4 141 "MODBUS_TIMER_ISR"
D G "MODBUS_TIMER_USED" 4 145 "MODBUS_TIMER_T1"
D G "MODBUS_PHY_LAYER_H" 5 25 ""
D G "MODBUS_SERIAL_WAIT_FOR_RESPONSE" 5 29 "(){   modbus_timeout_enabled = 0;   if(address)   {      while(!modbus_kbhit() && --modbus_serial_wait)         delay_us(1);      if(!modbus_serial_wait)         modbus_rx.error=TIMEOUT;   }   modbus_serial_wait = MODBUS_SERIAL_TIMEOUT;}"
D G "WAIT_FOR_HW_BUFFER" 5 104 "(){   while(!TRMT);}"
V G "modbus_serial_new" 5 110 "int1" `657 
C L "jump_to_isr" 5 2 6 "FUNCTION"
E G "ILLEGAL_FUNCTION" 5 120 "1" `659 
E G "ILLEGAL_DATA_ADDRESS" 5 121 "2" `660 
E G "ILLEGAL_DATA_VALUE" 5 121 "3" `661 
E G "SLAVE_DEVICE_FAILURE" 5 121 "4" `662 
E G "ACKNOWLEDGE" 5 121 "5" `663 
E G "SLAVE_DEVICE_BUSY" 5 122 "6" `664 
E G "MEMORY_PARITY_ERROR" 5 122 "8" `665 
E G "GATEWAY_PATH_UNAVAILABLE" 5 122 "10" `666 
E G "GATEWAY_TARGET_NO_RESPONSE" 5 123 "11" `667 
E G "TIMEOUT" 5 123 "12" `668 
T G "exception" 5 123 "_exception" `669  "These functions are defined in the MODBUS protocol.  These can be"
C L "jump_to_isr" 5 2 2 "FUNCTION"
E G "FUNC_READ_COILS" 5 130 "1" `671 
E G "FUNC_READ_DISCRETE_INPUT" 5 131 "2" `672 
E G "FUNC_READ_HOLDING_REGISTERS" 5 131 "3" `673 
E G "FUNC_READ_INPUT_REGISTERS" 5 132 "4" `674 
E G "FUNC_WRITE_SINGLE_COIL" 5 132 "5" `675 
E G "FUNC_WRITE_SINGLE_REGISTER" 5 133 "6" `676 
E G "FUNC_READ_EXCEPTION_STATUS" 5 133 "7" `677 
E G "FUNC_DIAGNOSTICS" 5 134 "8" `678 
E G "FUNC_GET_COMM_EVENT_COUNTER" 5 134 "11" `679 
E G "FUNC_GET_COMM_EVENT_LOG" 5 135 "12" `680 
E G "FUNC_WRITE_MULTIPLE_COILS" 5 135 "15" `681 
E G "FUNC_WRITE_MULTIPLE_REGISTERS" 5 136 "16" `682 
E G "FUNC_REPORT_SLAVE_ID" 5 136 "17" `683 
E G "FUNC_READ_FILE_RECORD" 5 137 "20" `684 
E G "FUNC_WRITE_FILE_RECORD" 5 137 "21" `685 
E G "FUNC_MASK_WRITE_REGISTER" 5 138 "22" `686 
E G "FUNC_READ_WRITE_MULTIPLE_REGISTERS" 5 138 "23" `687 
E G "FUNC_READ_FIFO_QUEUE" 5 138 "24" `688 
T G "function" 5 138 "_function" `689  "Our receive struct.  This is used when receiving data as a master or"
C L "jump_to_isr" 5 2 3 "FUNCTION"
C L "jump_to_isr" 5 2 1 "FUNCTION"
C L "jump_to_isr" 5 2 1 "FUNCTION"
C L "jump_to_isr" 5 2 1 "FUNCTION"
C L "jump_to_isr" 5 2 1 "FUNCTION"
V G "modbus_rx" 5 153 "{int8 address,int8 len,function func,exception error,int8[250] data}" `696  "For Custom Commands                                                             ////"
C L "jump_to_isr" 5 2 19 "FUNCTION"
F N "modbus_serial_send_start" 5 178 ""
V L "to" 5 178 "int8" `698 
V L "func" 5 178 "int8" `699 
f G "modbus_serial_send_start" 5 178 "void(int8 to,int8 func)" `697  "Purpose:    Sends a message stop"
C L "modbus_serial_send_start" 5 2 2 "FUNCTION"
F N "modbus_serial_send_stop" 5 183 ""
f G "modbus_serial_send_stop" 5 183 "void()" `700  "Purpose:    Puts a character onto the serial line"
C L "modbus_serial_send_stop" 5 2 2 "FUNCTION"
F N "modbus_serial_putc" 5 188 ""
V L "c" 5 188 "int8" `702 
f G "modbus_serial_putc" 5 188 "void(int8 c)" `701  "For Init                                                                        ////"
C L "modbus_serial_putc" 5 2 3 "FUNCTION"
F N "RCV_ON" 5 197 ""
f G "RCV_ON" 5 197 "void()" `703  "MODBUS_PHY_LAYER_H"
D G "MODBUS_APP_LAYER_H" 6 24 ""
C L "RCV_ON" 5 2 19 "FUNCTION"
C L "RCV_ON" 6 29 12 "FUNCTION"
F N "modbus_init" 6 43 ""
f G "modbus_init" 6 43 "void()" `704  "Purpose:    Get a message from the RS485 bus and store it in a buffer"
C L "modbus_init" 6 29 4 "FUNCTION"
F N "modbus_kbhit" 6 50 ""
f G "modbus_kbhit" 6 50 "int8()" `705 
C L "modbus_kbhit" 6 29 66 "FUNCTION"
T G "modbus_read_sub_request" 6 130 "{int8 reference_type,int16 file_number,int16 record_number,int16 record_length}" `711 
T G "modbus_write_sub_request" 6 139 "{int8 reference_type,int16 file_number,int16 record_number,int16 record_length,int16[242] data}" `718  "The following functions are defined in the MODBUS protocol.  Please"
C L "modbus_kbhit" 6 29 9 "FUNCTION"
F N "modbus_read_coils" 6 156 ""
V L "address" 6 156 "int8" `720 
V L "start_address" 6 156 "int16" `721 
V L "quantity" 6 156 "int16" `722 
f G "modbus_read_coils" 6 156 "exception(int8 address,int16 start_address,int16 quantity)" `719  "read_discrete_input"
C L "modbus_read_coils" 6 29 4 "FUNCTION"
F N "modbus_read_discrete_input" 6 165 ""
V L "address" 6 165 "int8" `724 
V L "start_address" 6 165 "int16" `725 
V L "quantity" 6 165 "int16" `726 
f G "modbus_read_discrete_input" 6 165 "exception(int8 address,int16 start_address,int16 quantity)" `723  "read_holding_registers"
C L "modbus_read_discrete_input" 6 29 4 "FUNCTION"
F N "modbus_read_holding_registers" 6 173 ""
V L "address" 6 173 "int8" `728 
V L "start_address" 6 173 "int16" `729 
V L "quantity" 6 173 "int16" `730 
f G "modbus_read_holding_registers" 6 173 "exception(int8 address,int16 start_address,int16 quantity)" `727  "read_input_registers"
C L "modbus_read_holding_registers" 6 29 4 "FUNCTION"
F N "modbus_read_input_registers" 6 182 ""
V L "address" 6 182 "int8" `732 
V L "start_address" 6 182 "int16" `733 
V L "quantity" 6 182 "int16" `734 
f G "modbus_read_input_registers" 6 182 "exception(int8 address,int16 start_address,int16 quantity)" `731  "write_single_coil"
C L "modbus_read_input_registers" 6 29 4 "FUNCTION"
F N "modbus_write_single_coil" 6 191 ""
V L "address" 6 191 "int8" `736 
V L "output_address" 6 191 "int16" `737 
V L "on" 6 191 "int8" `738 
f G "modbus_write_single_coil" 6 191 "exception(int8 address,int16 output_address,int8 on)" `735  "write_single_register"
C L "modbus_write_single_coil" 6 29 4 "FUNCTION"
F N "modbus_write_single_register" 6 200 ""
V L "address" 6 200 "int8" `740 
V L "reg_address" 6 200 "int16" `741 
V L "reg_value" 6 200 "int16" `742 
f G "modbus_write_single_register" 6 200 "exception(int8 address,int16 reg_address,int16 reg_value)" `739  "read_exception_status"
C L "modbus_write_single_register" 6 29 2 "FUNCTION"
F N "modbus_read_exception_status" 6 207 ""
V L "address" 6 207 "int8" `744 
f G "modbus_read_exception_status" 6 207 "exception(int8 address)" `743  "diagnostics"
C L "modbus_read_exception_status" 6 29 4 "FUNCTION"
F N "modbus_diagnostics" 6 216 ""
V L "address" 6 216 "int8" `746 
V L "sub_func" 6 216 "int16" `747 
V L "data" 6 216 "int16" `748 
f G "modbus_diagnostics" 6 216 "exception(int8 address,int16 sub_func,int16 data)" `745  "get_comm_event_couter"
C L "modbus_diagnostics" 6 29 2 "FUNCTION"
F N "modbus_get_comm_event_counter" 6 223 ""
V L "address" 6 223 "int8" `750 
f G "modbus_get_comm_event_counter" 6 223 "exception(int8 address)" `749  "get_comm_event_log"
C L "modbus_get_comm_event_counter" 6 29 2 "FUNCTION"
F N "modbus_get_comm_event_log" 6 230 ""
V L "address" 6 230 "int8" `752 
f G "modbus_get_comm_event_log" 6 230 "exception(int8 address)" `751  "write_multiple_coils"
C L "modbus_get_comm_event_log" 6 29 5 "FUNCTION"
F N "modbus_write_multiple_coils" 6 240 ""
V L "address" 6 240 "int8" `754 
V L "start_address" 6 240 "int16" `755 
V L "quantity" 6 240 "int16" `756 
V L "values" 6 241 "*int8" `757 
f G "modbus_write_multiple_coils" 6 241 "exception(int8 address,int16 start_address,int16 quantity,*int8 values)" `753  "write_multiple_registers"
C L "modbus_write_multiple_coils" 6 29 5 "FUNCTION"
F N "modbus_write_multiple_registers" 6 251 ""
V L "address" 6 251 "int8" `759 
V L "start_address" 6 251 "int16" `760 
V L "quantity" 6 251 "int16" `761 
V L "values" 6 252 "*int16" `762 
f G "modbus_write_multiple_registers" 6 252 "exception(int8 address,int16 start_address,int16 quantity,*int16 values)" `758  "report_slave_id"
C L "modbus_write_multiple_registers" 6 29 2 "FUNCTION"
F N "modbus_report_slave_id" 6 259 ""
V L "address" 6 259 "int8" `764 
f G "modbus_report_slave_id" 6 259 "exception(int8 address)" `763  "read_file_record"
C L "modbus_report_slave_id" 6 29 4 "FUNCTION"
F N "modbus_read_file_record" 6 268 ""
V L "address" 6 268 "int8" `766 
V L "byte_count" 6 268 "int8" `767 
V L "request" 6 269 "_modbus_read_sub_request *" `768 
f G "modbus_read_file_record" 6 269 "exception(int8 address,int8 byte_count,_modbus_read_sub_request * request)" `765  "write_file_record"
C L "modbus_read_file_record" 6 29 4 "FUNCTION"
F N "modbus_write_file_record" 6 278 ""
V L "address" 6 278 "int8" `770 
V L "byte_count" 6 278 "int8" `771 
V L "request" 6 279 "_modbus_write_sub_request *" `772 
f G "modbus_write_file_record" 6 279 "exception(int8 address,int8 byte_count,_modbus_write_sub_request * request)" `769  "mask_write_register"
C L "modbus_write_file_record" 6 29 5 "FUNCTION"
F N "modbus_mask_write_register" 6 289 ""
V L "address" 6 289 "int8" `774 
V L "reference_address" 6 289 "int16" `775 
V L "AND_mask" 6 290 "int16" `776 
V L "OR_mask" 6 290 "int16" `777 
f G "modbus_mask_write_register" 6 290 "exception(int8 address,int16 reference_address,int16 AND_mask,int16 OR_mask)" `773  "read_write_multiple_registers"
C L "modbus_mask_write_register" 6 29 7 "FUNCTION"
F N "modbus_read_write_multiple_registers" 6 302 ""
V L "address" 6 302 "int8" `779 
V L "read_start" 6 302 "int16" `780 
V L "read_quantity" 6 303 "int16" `781 
V L "write_start" 6 303 "int16" `782 
V L "write_quantity" 6 304 "int16" `783 
V L "write_registers_value" 6 305 "*int16" `784 
f G "modbus_read_write_multiple_registers" 6 305 "exception(int8 address,int16 read_start,int16 read_quantity,int16 write_start,int16 write_quantity,*int16 write_registers_value)" `778  "read_FIFO_queue"
C L "modbus_read_write_multiple_registers" 6 29 3 "FUNCTION"
F N "modbus_read_FIFO_queue" 6 313 ""
V L "address" 6 313 "int8" `786 
V L "FIFO_address" 6 313 "int16" `787 
f G "modbus_read_FIFO_queue" 6 313 "exception(int8 address,int16 FIFO_address)" `785  "MODBUS_TYPE"
C L "modbus_read_FIFO_queue" 6 29 1 "FUNCTION"
D G "MODBUS_PHY_LAYER_RTU_C" 7 19 ""
D G "TICKS_PER_SECOND" 7 25 "7812"
D G "MODBUS_GETDATA_TIMEOUT" 7 37 "40"
D G "RCV_OFF" 7 47 "() {disable_interrupts(INT_RDA);}"
C L "modbus_read_FIFO_queue" 7 92 1 "FUNCTION"
V G "modbus_timeout_enabled" 7 93 "int1" `800 
V G "modbus_serial_wait" 7 96 "int32" `801 
C L "modbus_read_FIFO_queue" 7 92 1 "FUNCTION"
E G "MODBUS_GETADDY" 7 100 "0" `803 
E G "MODBUS_GETFUNC" 7 100 "1" `804 
E G "MODBUS_GETDATA" 7 100 "2" `805 
V G "modbus_serial_state" 7 100 "" `806 
C L "modbus_read_FIFO_queue" 7 92 1 "FUNCTION"
V G "modbus_serial_crc" 7 108 "{int8[2] b,int16 d}" `810  "Table of CRC values for highorder byte *"
V G "modbus_auchCRCHi" 7 112 "[1]" `812 
C L "modbus_read_FIFO_queue" 7 92 1 "FUNCTION"
V G "modbus_auchCRCLo" 7 134 "[1]" `815 
C L "modbus_read_FIFO_queue" 7 92 3 "FUNCTION"
F N "RCV_ON" 7 158 ""
F G "RCV_ON" 7 159 "void()" `703 
C L "modbus_enable_timeout" 7 92 4 "FUNCTION"
F N "modbus_enable_timeout" 7 210 ""
V L "enable" 7 210 "int8" `818 
F G "modbus_enable_timeout" 7 211 "void(int8 enable)" `817 
C L "modbus_timeout_now" 7 92 4 "FUNCTION"
F N "modbus_timeout_now" 7 220 ""
F G "modbus_timeout_now" 7 221 "void()" `819 
C L "modbus_check_timeout" 7 92 4 "FUNCTION"
F N "modbus_check_timeout" 7 239 ""
F G "modbus_check_timeout" 7 240 "void()" `820 
C L "modbus_check_timeout" 7 92 3 "FUNCTION"
C L "modbus_calc_crc" 7 92 3 "FUNCTION"
F N "modbus_calc_crc" 7 259 ""
V L "data" 7 259 "int8" `822 
F G "modbus_calc_crc" 7 260 "void(int8 data)" `821 
V L "uIndex" 7 261 "int8" `823  "will index into CRC lookup table"
C L "modbus_calc_crc" 7 92 1 "FUNCTION"
C L "modbus_serial_putc" 7 92 3 "FUNCTION"
F N "modbus_serial_putc" 7 271 ""
V L "c" 7 271 "int8" `825 
F G "modbus_serial_putc" 7 272 "void(int8 c)" `701 
C L "modbus_serial_putc" 7 92 1 "FUNCTION"
C L "modbus_serial_send_start" 7 92 8 "FUNCTION"
F N "modbus_serial_send_start" 7 286 ""
V L "to" 7 286 "int8" `698 
V L "func" 7 286 "int8" `826 
F G "modbus_serial_send_start" 7 287 "void(int8 to,int8 func)" `697 
C L "modbus_serial_send_start" 7 92 1 "FUNCTION"
C L "modbus_serial_send_stop" 7 92 3 "FUNCTION"
F N "modbus_serial_send_stop" 7 306 ""
F G "modbus_serial_send_stop" 7 307 "void()" `700 
V L "crc_low" 7 308 "int8" `824 
V L "crc_high" 7 308 "int8" `825 
C L "modbus_serial_send_stop" 7 92 1 "FUNCTION"
F N "incomming_modbus_serial" 7 352 ""
F G "incomming_modbus_serial" 7 352 "void()" `826 
V L "c" 7 353 "int8" `827 
D G "MODBUS_APP_LAYER_C" 8 19 ""
C L "modbus_init" 6 2 18 "FUNCTION"
C L "modbus_init" 8 24 5 "FUNCTION"
F N "modbus_init" 8 31 ""
F G "modbus_init" 8 32 "void()" `704 
C L "modbus_kbhit" 8 24 5 "FUNCTION"
F N "modbus_kbhit" 8 49 ""
F G "modbus_kbhit" 8 50 "int8()" `705 
C L "modbus_kbhit" 8 24 1 "FUNCTION"
C L "modbus_kbhit" 8 24 1 "FUNCTION"
C L "modbus_read_coils" 8 24 11 "FUNCTION"
F N "modbus_read_coils" 8 86 ""
V L "address" 8 86 "int8" `720 
V L "start_address" 8 86 "int16" `721 
V L "quantity" 8 86 "int16" `831 
F G "modbus_read_coils" 8 87 "exception(int8 address,int16 start_address,int16 quantity)" `719 
C L "modbus_read_discrete_input" 8 24 5 "FUNCTION"
F N "modbus_read_discrete_input" 8 110 ""
V L "address" 8 110 "int8" `724 
V L "start_address" 8 110 "int16" `725 
V L "quantity" 8 110 "int16" `831 
F G "modbus_read_discrete_input" 8 111 "exception(int8 address,int16 start_address,int16 quantity)" `723 
C L "modbus_read_holding_registers" 8 24 5 "FUNCTION"
F N "modbus_read_holding_registers" 8 134 ""
V L "address" 8 134 "int8" `728 
V L "start_address" 8 134 "int16" `729 
V L "quantity" 8 134 "int16" `831 
F G "modbus_read_holding_registers" 8 135 "exception(int8 address,int16 start_address,int16 quantity)" `727 
C L "modbus_read_input_registers" 8 24 5 "FUNCTION"
F N "modbus_read_input_registers" 8 158 ""
V L "address" 8 158 "int8" `732 
V L "start_address" 8 158 "int16" `733 
V L "quantity" 8 158 "int16" `831 
F G "modbus_read_input_registers" 8 159 "exception(int8 address,int16 start_address,int16 quantity)" `731 
C L "modbus_write_single_coil" 8 24 5 "FUNCTION"
F N "modbus_write_single_coil" 8 182 ""
V L "address" 8 182 "int8" `736 
V L "output_address" 8 182 "int16" `737 
V L "on" 8 182 "int8" `831 
F G "modbus_write_single_coil" 8 183 "exception(int8 address,int16 output_address,int8 on)" `735 
C L "modbus_write_single_register" 8 24 5 "FUNCTION"
F N "modbus_write_single_register" 8 210 ""
V L "address" 8 210 "int8" `740 
V L "reg_address" 8 210 "int16" `741 
V L "reg_value" 8 210 "int16" `831 
F G "modbus_write_single_register" 8 211 "exception(int8 address,int16 reg_address,int16 reg_value)" `739 
C L "modbus_read_exception_status" 8 24 3 "FUNCTION"
F N "modbus_read_exception_status" 8 232 ""
V L "address" 8 232 "int8" `829 
F G "modbus_read_exception_status" 8 233 "exception(int8 address)" `743 
C L "modbus_diagnostics" 8 24 5 "FUNCTION"
F N "modbus_diagnostics" 8 249 ""
V L "address" 8 249 "int8" `746 
V L "sub_func" 8 249 "int16" `747 
V L "data" 8 249 "int16" `831 
F G "modbus_diagnostics" 8 250 "exception(int8 address,int16 sub_func,int16 data)" `745 
C L "modbus_get_comm_event_counter" 8 24 3 "FUNCTION"
F N "modbus_get_comm_event_counter" 8 271 ""
V L "address" 8 271 "int8" `829 
F G "modbus_get_comm_event_counter" 8 272 "exception(int8 address)" `749 
C L "modbus_get_comm_event_log" 8 24 3 "FUNCTION"
F N "modbus_get_comm_event_log" 8 286 ""
V L "address" 8 286 "int8" `829 
F G "modbus_get_comm_event_log" 8 287 "exception(int8 address)" `751 
C L "modbus_write_multiple_coils" 8 24 6 "FUNCTION"
F N "modbus_write_multiple_coils" 8 304 ""
V L "address" 8 304 "int8" `754 
V L "start_address" 8 304 "int16" `755 
V L "quantity" 8 304 "int16" `756 
V L "values" 8 305 "*int8" `832 
F G "modbus_write_multiple_coils" 8 306 "exception(int8 address,int16 start_address,int16 quantity,*int8 values)" `753 
V L "i" 8 307 "int8" `828 
V L "count" 8 307 "int8" `829 
C L "modbus_write_multiple_registers" 8 24 6 "FUNCTION"
F N "modbus_write_multiple_registers" 8 342 ""
V L "address" 8 342 "int8" `759 
V L "start_address" 8 342 "int16" `760 
V L "quantity" 8 342 "int16" `761 
V L "values" 8 343 "*int16" `834 
F G "modbus_write_multiple_registers" 8 344 "exception(int8 address,int16 start_address,int16 quantity,*int16 values)" `758 
V L "i" 8 345 "int8" `830 
V L "count" 8 345 "int8" `831 
C L "modbus_report_slave_id" 8 24 3 "FUNCTION"
F N "modbus_report_slave_id" 8 377 ""
V L "address" 8 377 "int8" `833 
F G "modbus_report_slave_id" 8 378 "exception(int8 address)" `763 
C L "modbus_read_file_record" 8 24 5 "FUNCTION"
F N "modbus_read_file_record" 8 394 ""
V L "address" 8 394 "int8" `766 
V L "byte_count" 8 394 "int8" `767 
V L "request" 8 395 "_modbus_read_sub_request *" `835 
F G "modbus_read_file_record" 8 396 "exception(int8 address,int8 byte_count,_modbus_read_sub_request * request)" `765 
V L "i" 8 397 "int8" `832 
C L "modbus_write_file_record" 8 24 5 "FUNCTION"
F N "modbus_write_file_record" 8 429 ""
V L "address" 8 429 "int8" `770 
V L "byte_count" 8 429 "int8" `771 
V L "request" 8 430 "_modbus_write_sub_request *" `839 
F G "modbus_write_file_record" 8 431 "exception(int8 address,int8 byte_count,_modbus_write_sub_request * request)" `769 
V L "i" 8 432 "int8" `836 
V L "j" 8 432 "int8" `837 
C L "modbus_mask_write_register" 8 24 6 "FUNCTION"
F N "modbus_mask_write_register" 8 472 ""
V L "address" 8 472 "int8" `774 
V L "reference_address" 8 472 "int16" `775 
V L "AND_mask" 8 473 "int16" `776 
V L "OR_mask" 8 473 "int16" `842 
F G "modbus_mask_write_register" 8 474 "exception(int8 address,int16 reference_address,int16 AND_mask,int16 OR_mask)" `773 
C L "modbus_read_write_multiple_registers" 8 24 8 "FUNCTION"
F N "modbus_read_write_multiple_registers" 8 503 ""
V L "address" 8 503 "int8" `779 
V L "read_start" 8 503 "int16" `780 
V L "read_quantity" 8 504 "int16" `781 
V L "write_start" 8 504 "int16" `782 
V L "write_quantity" 8 505 "int16" `783 
V L "write_registers_value" 8 506 "*int16" `844 
F G "modbus_read_write_multiple_registers" 8 507 "exception(int8 address,int16 read_start,int16 read_quantity,int16 write_start,int16 write_quantity,*int16 write_registers_value)" `778 
V L "i" 8 508 "int8" `838 
C L "modbus_read_FIFO_queue" 8 24 4 "FUNCTION"
F N "modbus_read_FIFO_queue" 8 545 ""
V L "address" 8 545 "int8" `786 
V L "FIFO_address" 8 545 "int16" `841 
F G "modbus_read_FIFO_queue" 8 546 "exception(int8 address,int16 FIFO_address)" `785 
D G "EEPROM_SIZE" 0 17 "256"
D G "MODBUS_SLAVE_ADDRESS" 0 18 "255"
V G "address" 0 19 "int8" `839 
V G "buffer" 0 19 "int8[256]" `840 
F N "ssp_interrupt" 0 22 ""
F G "ssp_interrupt" 0 23 "void(int16 write_start,int16 write_quantity,*int16 write_registers_value)" `841 
V L "incoming" 0 24 "int8" `842 
V L "state" 0 24 "int8" `843 
C L "ssp_interrupt" 0 28 1 "FUNCTION"
C L "ssp_interrupt" 0 28 1 "FUNCTION"
C L "ssp_interrupt" 0 28 1 "FUNCTION"
C L "ssp_interrupt" 0 28 1 "FUNCTION"
C L "ssp_interrupt" 0 28 1 "FUNCTION"
F N "MAIN" 0 48 ""
F G "MAIN" 0 49 "void()" `845 
C L "MAIN" 0 28 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_c" 0 0
F B "set_input_level_a" 1 0
F B "set_input_level_c" 1 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "setup_dsm" 1 3
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_slaveaddr" 1 2
F B "i2c_init" 1 2
F B "i2c_poll" 0 1
F B "get_ticks" 0 1
F B "set_ticks" 1 2
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
